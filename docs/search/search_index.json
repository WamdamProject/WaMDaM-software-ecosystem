{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the WaMDaM documentations\n\n\nOverview\n\n\nWaMDaM is both an information model and a couple of supporting software ecosystem. WaMDaM tools are designed to organize, identify, and compare multiple systems water management data in a single database. \n\n\nThink of WaMDaM as a repository of water management data (blue cylinder) and a translator between numerous data sources on the left and different models on the right.   \n\n\nWaMDaM translates two aspects of the data: the \nsyntax\n (i.e., structure) and \nsemantics\n (terminology). WaMDaM intends to speed the time to find, organize, and synthesize data from different data sources, and prepare data for modeling.\n\n\n\nWorkflow of using WaMDaM\n\n\nThese are the high level steps to use WaMDaM\n\n\n\nGetting Started\n\n\nThe \nGetting Started\n section guides you how to set up a WaMDaM Wizard and load your data into a SQLite database. \n\n\nApplication and use cases\n\n\nCheck out the \nuse cases\n that demonstrate how WaMDaM enables systematic data query and comparisons across multiple different models and datasets \n\n\n\n\nInformation Model\n\n\n\n\nView primary \ndocumentation\n for the WaMDaM Information Model \n\n\n\n\nCross-platform implementations\n\n\nSupport for multiple RDBMS: MS SQL Server, MySQL, PostgreSQL, and SQLite\n\n\nWaMDaM Controlled vocabulary\n\n\nA Python/Django-based web application for managing the WaMDaM controlled vocabularies\n* Online submittal and moderation of new terms and changes to existing terms\n* Views of all existing vocabularies and terms\n* Application deployed at \nvocabulary.wamdam.org\n\n* \nhttps://github.com/WamdamProject/WaMDaM_ControlledVocabularies\n\n\nWaMDaM Wizard\n\n\nA Python-based Graphical User Interface to validate and load water management data mainly from an Excel Template into a SQLite WaMDaM compliant database.\n\n* \nWaMDaM Wizard\n \nBy using the Wizard, users are not expected to understand the underlying WaMDaM database of schema. Users just need to understand how to fit their data into these concepts: ObjectType, Attribute, Instance, Network, and Scenario. \n\n\nFeedback\n\n\nDo you have feedback on WaMDaM? \nThe authors\n would love to hear from you.\n\nLet us know what interest you in WaMDaM by submitting \ncomments on GitHub here", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-wamdam-documentations", 
            "text": "", 
            "title": "Welcome to the WaMDaM documentations"
        }, 
        {
            "location": "/#overview", 
            "text": "WaMDaM is both an information model and a couple of supporting software ecosystem. WaMDaM tools are designed to organize, identify, and compare multiple systems water management data in a single database.   Think of WaMDaM as a repository of water management data (blue cylinder) and a translator between numerous data sources on the left and different models on the right.     WaMDaM translates two aspects of the data: the  syntax  (i.e., structure) and  semantics  (terminology). WaMDaM intends to speed the time to find, organize, and synthesize data from different data sources, and prepare data for modeling.", 
            "title": "Overview"
        }, 
        {
            "location": "/#workflow-of-using-wamdam", 
            "text": "These are the high level steps to use WaMDaM", 
            "title": "Workflow of using WaMDaM"
        }, 
        {
            "location": "/#getting-started", 
            "text": "The  Getting Started  section guides you how to set up a WaMDaM Wizard and load your data into a SQLite database.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#application-and-use-cases", 
            "text": "Check out the  use cases  that demonstrate how WaMDaM enables systematic data query and comparisons across multiple different models and datasets", 
            "title": "Application and use cases"
        }, 
        {
            "location": "/#information-model", 
            "text": "View primary  documentation  for the WaMDaM Information Model", 
            "title": "Information Model"
        }, 
        {
            "location": "/#cross-platform-implementations", 
            "text": "Support for multiple RDBMS: MS SQL Server, MySQL, PostgreSQL, and SQLite", 
            "title": "Cross-platform implementations"
        }, 
        {
            "location": "/#wamdam-controlled-vocabulary", 
            "text": "A Python/Django-based web application for managing the WaMDaM controlled vocabularies\n* Online submittal and moderation of new terms and changes to existing terms\n* Views of all existing vocabularies and terms\n* Application deployed at  vocabulary.wamdam.org \n*  https://github.com/WamdamProject/WaMDaM_ControlledVocabularies", 
            "title": "WaMDaM Controlled vocabulary"
        }, 
        {
            "location": "/#wamdam-wizard", 
            "text": "A Python-based Graphical User Interface to validate and load water management data mainly from an Excel Template into a SQLite WaMDaM compliant database. \n*  WaMDaM Wizard  \nBy using the Wizard, users are not expected to understand the underlying WaMDaM database of schema. Users just need to understand how to fit their data into these concepts: ObjectType, Attribute, Instance, Network, and Scenario.", 
            "title": "WaMDaM Wizard"
        }, 
        {
            "location": "/#feedback", 
            "text": "Do you have feedback on WaMDaM?  The authors  would love to hear from you. \nLet us know what interest you in WaMDaM by submitting  comments on GitHub here", 
            "title": "Feedback"
        }, 
        {
            "location": "/Why_WaMDaM/", 
            "text": "Why WaMDaM?\n\n\nProblem\n\n\nWater resources modelers and researchers seek to solve integrated water management problems in an area of interest. Current practices to identify and analyze input data for water resources systems models are often dataset specific, stored in different formats, described using different vocabularies, require time-intensive, manual data manipulations, and cannot be reused despite the fact that basic data elements are similar across models\n\n\nNone of the existing data management methods can help modelers answer these these questions for data query, comparison, and model building activities:\n \n\n\n\n\nWhat data are available to develop a model in a study area?\n\n\nHow do data values for properties of system components differ across datasets? \n\n\nWhat differences are there across datasets in connectivity of natural and built infrastructure components in a particular area? \n\n\nWhat differences are there in network topology, metadata, and input data between two scenarios of a model instance?\n\n\n\n\n\n\nFigure 1:\n Schematic of a systems water management network with two scenarios\n\n\nWhat are the Water Management Data?\n\n\nThe water management data domain fundamentally includes natural and built water system components like water supply, infrastructure, and demand sites, represented through nodes and links (Brown et al., 2015; Loucks et al., 2005; Rosenberg and Madani, 2014).    \n\n\nThe domain also includes using multiple data types that represent quantitative and qualitative attributes of the system components like time series, seasonal parameters, and multi variable arrays. Example attribute data types are, time series of inflow and outflow of reservoirs, multi variable series of reservoir storage and surface area that change with elevation, and monthly seasonal reservoir evaporation across years. \n\n\n\n\nFigure 2:\n systems water management data\n\n\nSolution\n\n\nWhat can you do with WaMDaM not possible before?\n \n\n\nWaMDaM is an effort to standardize how we organize water management data which supports eight features altogether that partially exist in prior methods to enable users to: \n\n\n\n\nSupport different water resources systems components that are used in water management models like hydrology, infrastructure, and demand sites as reusable modules or sets of systems components.   \n\n\nRepresent connectivity and interactions between components in space through networks of nodes and links as used in systems modeling. \n\n\nSupport scenarios that track topologic changes in networks, metadata and data values. \n\n\nSupport multiple data types that are used in systems modeling like time series and multidimensional arrays.  \n\n\nUses consistent contextual metadata to unambiguously interpret data values.\n\n\nUses controlled vocabulary to relate inconsistent terms across data sources and models.  \n\n\nEnables conditional data queries to access and compare subsets of data and metadata \n\n\nDeveloped in an open-source software environment.", 
            "title": "Why WaMDaM?"
        }, 
        {
            "location": "/Why_WaMDaM/#why-wamdam", 
            "text": "", 
            "title": "Why WaMDaM?"
        }, 
        {
            "location": "/Why_WaMDaM/#problem", 
            "text": "Water resources modelers and researchers seek to solve integrated water management problems in an area of interest. Current practices to identify and analyze input data for water resources systems models are often dataset specific, stored in different formats, described using different vocabularies, require time-intensive, manual data manipulations, and cannot be reused despite the fact that basic data elements are similar across models  None of the existing data management methods can help modelers answer these these questions for data query, comparison, and model building activities:     What data are available to develop a model in a study area?  How do data values for properties of system components differ across datasets?   What differences are there across datasets in connectivity of natural and built infrastructure components in a particular area?   What differences are there in network topology, metadata, and input data between two scenarios of a model instance?    Figure 1:  Schematic of a systems water management network with two scenarios", 
            "title": "Problem"
        }, 
        {
            "location": "/Why_WaMDaM/#what-are-the-water-management-data", 
            "text": "The water management data domain fundamentally includes natural and built water system components like water supply, infrastructure, and demand sites, represented through nodes and links (Brown et al., 2015; Loucks et al., 2005; Rosenberg and Madani, 2014).      The domain also includes using multiple data types that represent quantitative and qualitative attributes of the system components like time series, seasonal parameters, and multi variable arrays. Example attribute data types are, time series of inflow and outflow of reservoirs, multi variable series of reservoir storage and surface area that change with elevation, and monthly seasonal reservoir evaporation across years.    Figure 2:  systems water management data", 
            "title": "What are the Water Management Data?"
        }, 
        {
            "location": "/Why_WaMDaM/#solution", 
            "text": "What can you do with WaMDaM not possible before?    WaMDaM is an effort to standardize how we organize water management data which supports eight features altogether that partially exist in prior methods to enable users to:    Support different water resources systems components that are used in water management models like hydrology, infrastructure, and demand sites as reusable modules or sets of systems components.     Represent connectivity and interactions between components in space through networks of nodes and links as used in systems modeling.   Support scenarios that track topologic changes in networks, metadata and data values.   Support multiple data types that are used in systems modeling like time series and multidimensional arrays.    Uses consistent contextual metadata to unambiguously interpret data values.  Uses controlled vocabulary to relate inconsistent terms across data sources and models.    Enables conditional data queries to access and compare subsets of data and metadata   Developed in an open-source software environment.", 
            "title": "Solution"
        }, 
        {
            "location": "/Rationale/", 
            "text": "Rationale and Context\n\n\nProblem\n\n\nWater managers and researchers spend a considerable time and effort to build software to communicate their results each time they develop a new water resources model. They also spend a large time to analyze and synthesize water management data into models. \n\n\nSolution\n\n\nMost of existing models use the traditional architecture which incorporate three integrated and tight coupled components i) graphical user interface (GUI), data management system ii), and iii) the model engine of algorithms (Harou et al., 2010). \n\n\nThere is an increasing interest to decouple the three components to allow the reuses of data and user interface across different models. WaM-DaM aims to provide a standard for the database component so other models can re-use the same data.\n\n\nRationale\n\n\nThe early ideas for a solution like WaMDaM came out from the work on \nHydraPlatform\n by UC Davis PhD Graduates between 2008 to 2010. HydraPlatform as an Open-Source Software Platform for Water Resource Management Models focused on providing a generic database, user interface, and data exporters to models. \nHydra\n in 2014-2016 improved HydroPlatform into a web-service. \nOpenAgua\n uses Hydra into web-based application for modeling water systems for water resources planning and management.\n\n\nSystems water management data lack a standardized method to organize and communicate its diverse and disparate data. Developing a persistent data model for water management data is an important step to advance how we communicate such vital data across disciplines. So the C-WATER team at Utah State University took the task to develop WaMDaM.\n\n\nThe development of WaMDaM has been part of an ambitious research project to develop cyberinfrastructure to advance the science of hydrology and water resources management. The project is called \u201cCyber-Infrastructure to Advance High Performance Water Resource Modelling\u201d \nCI-WATER\n. The CI-WATER Project was funded by the National Science Foundation (NSF) through grants \nEPS-1135482\n and \nEPS-1135483\n. The project comprises large interdisciplinary team of Utah and Wyoming researchers and concluded in October 2016\n\n\nThe CI-WATER project included researchers from Brigham Young University, the University of Utah, Utah State University, and the University of Wyoming. The project has received a $6 million, three-year award from the NSF to develop a better understanding of the interconnectivity of natural and human water resources systems \u2013 a critical environmental sustainability problem facing both Western states. CI-WATER aims also to simulate and study how factors such as population growth, shifting land uses and climate variability will impact water storage and availability in the Intermountain West. This award is made under the NSF Experimental Program to Stimulate Competitive Research (EPSCoR), which supports states' efforts to enhance research, science and mathematics education, and workforce development. \n\n\nAdd iUtah \n\n\nContext\n\n\nThe timing, availability of funds, expertise, and passion for WaMDaM development were incredible by all means. Along the way of WaMDaM development, there has been a real interest from national and international scientists and practitioners in standardizing the way we communicate systems water management data.\n\n\nWe were fortunate to discuss the development of WaMDaM with these research groups and agencies listed below. WaMDaM and these projects complement each other and there is a big room for real future collaboration. We hope that our discussions with them continue so we can achieve our common goal of having a standard to communicate systems water management data. \n\n\n\n\n\n\n\n\n#\n\n\nProject\n\n\nAffiliation\n\n\n\n\n\n\n\n\n\n\n1\n\n\nHydra Platform: web-services to linking water resource network models, share data in an open data management platform\n\n\nUniversity of Manchester, United Kingdom\n\n\n\n\n\n\n2\n\n\nHOBBES\n:  a bottom up approach to improve and organize the data for water modeling efforts in California\n\n\nUniversity of California, Davis\n\n\n\n\n\n\n3\n\n\nADHydro\n: A Large-scale High-resolution Multi-physics Distributed Water Resources Model for Water Resources Simulations\n\n\nUniversity of Wyoming\n\n\n\n\n\n\n4\n\n\nWEAP\n: Water Evaluation And Planning System\n\n\nStockholm Environment Institute\n\n\n\n\n\n\n5\n\n\nRiverWare\n: a river system modeling tool\n\n\nCenter for Advanced Decision Support for Water and Environmental Systems (CADSWES). University of Colorado at Boulder\n\n\n\n\n\n\n6\n\n\nHEC-ResSim\n: The Reservoir System Simulation software\n\n\nU.S. Army Corps of Engineers, Institute for Water Resources, Hydrologic Engineering Center\n\n\n\n\n\n\n7\n\n\nIWRM\n: Integrated Water Resources Management\n\n\nThe Urban Water Group\n University of Utah\n\n\n\n\n\n\n8\n\n\nWaDE\n:The Water Data Exchange Program\n\n\nWestern States Water Council\n\n\n\n\n\n\n9\n\n\nManaging data for the state river basins water budgets models\n\n\nUtah Division of Water Resources\n\n\n\n\n\n\n10\n\n\nHydroShare\n:collaborative environment for sharing hydrologic data and models aimed at giving hydrologists the technology infrastructure they need to address critical issues related to water quantity, quality, accessibility, and management.\n\n\nUtah State University", 
            "title": "Rationale"
        }, 
        {
            "location": "/Rationale/#rationale-and-context", 
            "text": "", 
            "title": "Rationale and Context"
        }, 
        {
            "location": "/Rationale/#problem", 
            "text": "Water managers and researchers spend a considerable time and effort to build software to communicate their results each time they develop a new water resources model. They also spend a large time to analyze and synthesize water management data into models.", 
            "title": "Problem"
        }, 
        {
            "location": "/Rationale/#solution", 
            "text": "Most of existing models use the traditional architecture which incorporate three integrated and tight coupled components i) graphical user interface (GUI), data management system ii), and iii) the model engine of algorithms (Harou et al., 2010).   There is an increasing interest to decouple the three components to allow the reuses of data and user interface across different models. WaM-DaM aims to provide a standard for the database component so other models can re-use the same data.", 
            "title": "Solution"
        }, 
        {
            "location": "/Rationale/#rationale", 
            "text": "The early ideas for a solution like WaMDaM came out from the work on  HydraPlatform  by UC Davis PhD Graduates between 2008 to 2010. HydraPlatform as an Open-Source Software Platform for Water Resource Management Models focused on providing a generic database, user interface, and data exporters to models.  Hydra  in 2014-2016 improved HydroPlatform into a web-service.  OpenAgua  uses Hydra into web-based application for modeling water systems for water resources planning and management.  Systems water management data lack a standardized method to organize and communicate its diverse and disparate data. Developing a persistent data model for water management data is an important step to advance how we communicate such vital data across disciplines. So the C-WATER team at Utah State University took the task to develop WaMDaM.  The development of WaMDaM has been part of an ambitious research project to develop cyberinfrastructure to advance the science of hydrology and water resources management. The project is called \u201cCyber-Infrastructure to Advance High Performance Water Resource Modelling\u201d  CI-WATER . The CI-WATER Project was funded by the National Science Foundation (NSF) through grants  EPS-1135482  and  EPS-1135483 . The project comprises large interdisciplinary team of Utah and Wyoming researchers and concluded in October 2016  The CI-WATER project included researchers from Brigham Young University, the University of Utah, Utah State University, and the University of Wyoming. The project has received a $6 million, three-year award from the NSF to develop a better understanding of the interconnectivity of natural and human water resources systems \u2013 a critical environmental sustainability problem facing both Western states. CI-WATER aims also to simulate and study how factors such as population growth, shifting land uses and climate variability will impact water storage and availability in the Intermountain West. This award is made under the NSF Experimental Program to Stimulate Competitive Research (EPSCoR), which supports states' efforts to enhance research, science and mathematics education, and workforce development.   Add iUtah", 
            "title": "Rationale"
        }, 
        {
            "location": "/Rationale/#context", 
            "text": "The timing, availability of funds, expertise, and passion for WaMDaM development were incredible by all means. Along the way of WaMDaM development, there has been a real interest from national and international scientists and practitioners in standardizing the way we communicate systems water management data.  We were fortunate to discuss the development of WaMDaM with these research groups and agencies listed below. WaMDaM and these projects complement each other and there is a big room for real future collaboration. We hope that our discussions with them continue so we can achieve our common goal of having a standard to communicate systems water management data.      #  Project  Affiliation      1  Hydra Platform: web-services to linking water resource network models, share data in an open data management platform  University of Manchester, United Kingdom    2  HOBBES :  a bottom up approach to improve and organize the data for water modeling efforts in California  University of California, Davis    3  ADHydro : A Large-scale High-resolution Multi-physics Distributed Water Resources Model for Water Resources Simulations  University of Wyoming    4  WEAP : Water Evaluation And Planning System  Stockholm Environment Institute    5  RiverWare : a river system modeling tool  Center for Advanced Decision Support for Water and Environmental Systems (CADSWES). University of Colorado at Boulder    6  HEC-ResSim : The Reservoir System Simulation software  U.S. Army Corps of Engineers, Institute for Water Resources, Hydrologic Engineering Center    7  IWRM : Integrated Water Resources Management  The Urban Water Group  University of Utah    8  WaDE :The Water Data Exchange Program  Western States Water Council    9  Managing data for the state river basins water budgets models  Utah Division of Water Resources    10  HydroShare :collaborative environment for sharing hydrologic data and models aimed at giving hydrologists the technology infrastructure they need to address critical issues related to water quantity, quality, accessibility, and management.  Utah State University", 
            "title": "Context"
        }, 
        {
            "location": "/Authors/", 
            "text": "WaMDaM Authors\n\n\nAdel M. Abdallah has been the lead in WaMDaM development as part of his PhD dissertation at Utah State University under the advising of Dr. David Rosenberg.  \n\n\nThe timing, availability of funding, expertise, and passion for WaMDaM development were incredible by all means. We were encouraged by a great interest from national and international \nscientists and practitioners\n in standardizing the way we work with and communicate systems water management data.\n\n\nAdel M. Abdallah\n \n\nPhD Candidate: Systems Analysis Hydroinformatics\n\nemail: \n\n\nDavid E. Rosenberg\n \n\nAssociate Professor: Systems Analysis\n\nemail: \n\n\n\n\nDavid Rosenberg (left) and Adel Abdallah (right)\nreceiving the Best Research-Oriented Paper of the Year from the Environmental and Water Resources Institute, 2015. [Earlier work]   \n\n\nJournal Article: \nHeterogeneous residential water and energy linkages and implications for conservation and management", 
            "title": "Authors"
        }, 
        {
            "location": "/Authors/#wamdam-authors", 
            "text": "Adel M. Abdallah has been the lead in WaMDaM development as part of his PhD dissertation at Utah State University under the advising of Dr. David Rosenberg.    The timing, availability of funding, expertise, and passion for WaMDaM development were incredible by all means. We were encouraged by a great interest from national and international  scientists and practitioners  in standardizing the way we work with and communicate systems water management data.  Adel M. Abdallah   \nPhD Candidate: Systems Analysis Hydroinformatics \nemail:   David E. Rosenberg   \nAssociate Professor: Systems Analysis \nemail:    David Rosenberg (left) and Adel Abdallah (right)\nreceiving the Best Research-Oriented Paper of the Year from the Environmental and Water Resources Institute, 2015. [Earlier work]     Journal Article:  Heterogeneous residential water and energy linkages and implications for conservation and management", 
            "title": "WaMDaM Authors"
        }, 
        {
            "location": "/Publications/", 
            "text": "WaMDaM publications\n\n\nBelow are lists of all the presentations and publications on WaMDaM products since inception.  \n\n\nThey reflect the progression of ideas and discussions over five years that shaped the final WaMDaM product presented here.  \n\n\nThey also reflect the type and number of audiences that WaMDaM was presented to and ultimately benefited from their feedback.    \n\n\nPeer-reviewed journal articles\n\n\n\n\n\n\nPreparing to submit: A New Information Model to Manage Data for Water Resources Systems Modeling. Journal of Environmental Modeling and Software          \n\n\n\n\n\n\nDrafted: A Vision for a Software Ecosystem to Publish and Discover Data and Models for Water Resources Systems\n\n\n\n\n\n\nIn preparation: Workflows to Automate Data Preparation for Comparison Systems Water Management Models         \n\n\n\n\n\n\nPeer-reviewed conference articles\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2014). \nWaMDaM: A Data Model to Organize and Synthesize Water Management Data\n. 7\nth\n International Congress on Environmental Modelling and Software. International Environmental Modelling and Software Society (iEMSs)        \n\n\n\n\nReports and summaries\n\n\n\n\n\n\nAdel M. Abdallah and David Rosenberg (2015) \nFact Sheet: A General Relational Model to Organize Water Management Data     \n\n (WaMDaM)\n. Workshop: Modernizing Data Management of System Modeling. University of California, Davis. Dec 2015      \n\n\n\n\n\n\nAdel M. Abdallah and David Rosenberg (2013). \nThe Water Management Data Model (WaMDaM): A Universal Standard to Communicate Water Systems\n. A summary to share with collaborators. Dec 2013      \n\n\n\n\n\n\nAdel M. Abdallah (2013). \nInvestigate the Capability of Arc Hydro Framework to Represent Water Management Data\n Class Term Project Report, GIS in Water Resources, Utah State University Nov, 2013.      \n\n\n\n\n\n\nAdel M. Abdallah, Jason Randall, Jason Smith, and Maxwell Barrus (2013) \nA Water Management Data Model\n Class Term Project Report. Database Implementation, Utah State University, April 2013            \n\n\n\n\n\n\nAdel M. Abdallah (2012)\nDesign Reservoir Conceptual Data Model\n. Class Term Project Report, Hydroinformatics, Utah State University Dec 2012.        \n\n\n\n\n\n\nWorkshops\n\n\n\n\nAdel Abdallah and David Rosenberg (2015) \nWaMDaM Workshop: Discover what water management data is available to run a WEAP model\n3\nrd\n CUAHSI Conference on Hydroinformatics Model and Data Interoperability: From Theory to Practice July 1517, 2015, Tuscaloosa, AL         \n\n\n\n\nConference posters\n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2015) \nA Relational Model to Organize and Synthesize Disparate Systems Water Management Data\n. Model and Data Interoperability: From Theory to Practice July 1517, 2015, University of Alabama and the National Water Center, Tuscaloosa, AL        \n\n\n\n\n\n\nAdel M. Abdallah, David E. Rosenberg (2014).\nWaMDaM: A Data Model to Organize and Synthesize Water Management Data\n  International Environmental Modelling and Software Society (iEMSs) 7\nth\n Intl. Congress on Env. Modelling and Software, San Diego, CA, USA.       \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2013). \nA Relational Data Model for Water Management Data\n CUASHI Conference on Hydroinformatics and Modeling, Logan, UT: July 1719, 2013.      \n\n\n\n\n\n\nConference presentations\n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2017). \nA New Method to Organize, Identify, and Compare Water Management Data for Systems Models\n. World Environmental \n Water Resources Congress, sacramento, CA: May 2125, 2017.        \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2015). \nApplying Best Data Practices to Work with Water Management Data (WaMDaM)\n. UC \nInvited\n UC Davis Workshop. Dec 2015       \n\n\n\n\n\n\nAdel M. Abdallah (2015). \nAfter 50 years of water data collection and modeling, how can we universally organize water management data?\n Utah Water Research Laboratory Alumni Open House: 50\nth\n Anniversary. Oct 2015         \n\n\n\n\n\n\nAdel M. Abdallah (2015). \nA Relational Model, Workflows, and Parallel Computing to Improve Water Resources Modeling and Management\n. PhD Dissertation Proposal Defense, Utah State University. Dec 2015      \n\n\n\n\n\n\nAdel M. Abdallah (2015).\nWaMDaM: A Data Model to Organize, Share, and Publish Water Management Data\nWater and Environmnetla Engineering Gradudate Seminar. April 2014        \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2014). \nWaMDaM: A Data Model to Organize and Synthesize Water Management\n. Data Utah Water Data Users Group 2\nnd\n Meeting, Salt Lake City, Utah: Jan. 27, 2015.       \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2014). \nWaMDaM: A Data Model to Synthesize and Organize Water Management Data\n. World Environmental \n Water Resources Congress, Portland, OR: June 15, 2014.        \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2014). \nWaMDaM: A Data Model to Organize, Share, and Publish Water Management Data\n American Water Resources Association (AWRA) Spring Specialty Conference\". Snowbird, Utah, USA. May 1214, 2014       \n\n\n\n\n\n\nAdel M. Abdallah and David E. Rosenberg (2014).\nData Model and High Performance Computing Tools to Advance Water Resources Management and Modeling\n.CIWater Symposium. Salt lake City, Utah. Feb 2014.       \n\n\n\n\n\n\nAdel M. Abdallah (2013). \nDesign a Database to Manage Water Reservoir Data\n. Public outreach. CIWater Symposium May 2013. Salt Lake City, Utah.", 
            "title": "Publications"
        }, 
        {
            "location": "/Publications/#wamdam-publications", 
            "text": "Below are lists of all the presentations and publications on WaMDaM products since inception.    They reflect the progression of ideas and discussions over five years that shaped the final WaMDaM product presented here.    They also reflect the type and number of audiences that WaMDaM was presented to and ultimately benefited from their feedback.", 
            "title": "WaMDaM publications"
        }, 
        {
            "location": "/Publications/#peer-reviewed-journal-articles", 
            "text": "Preparing to submit: A New Information Model to Manage Data for Water Resources Systems Modeling. Journal of Environmental Modeling and Software              Drafted: A Vision for a Software Ecosystem to Publish and Discover Data and Models for Water Resources Systems    In preparation: Workflows to Automate Data Preparation for Comparison Systems Water Management Models", 
            "title": "Peer-reviewed journal articles"
        }, 
        {
            "location": "/Publications/#peer-reviewed-conference-articles", 
            "text": "Adel M. Abdallah and David E. Rosenberg (2014).  WaMDaM: A Data Model to Organize and Synthesize Water Management Data . 7 th  International Congress on Environmental Modelling and Software. International Environmental Modelling and Software Society (iEMSs)", 
            "title": "Peer-reviewed conference articles"
        }, 
        {
            "location": "/Publications/#reports-and-summaries", 
            "text": "Adel M. Abdallah and David Rosenberg (2015)  Fact Sheet: A General Relational Model to Organize Water Management Data      \n (WaMDaM) . Workshop: Modernizing Data Management of System Modeling. University of California, Davis. Dec 2015          Adel M. Abdallah and David Rosenberg (2013).  The Water Management Data Model (WaMDaM): A Universal Standard to Communicate Water Systems . A summary to share with collaborators. Dec 2013          Adel M. Abdallah (2013).  Investigate the Capability of Arc Hydro Framework to Represent Water Management Data  Class Term Project Report, GIS in Water Resources, Utah State University Nov, 2013.          Adel M. Abdallah, Jason Randall, Jason Smith, and Maxwell Barrus (2013)  A Water Management Data Model  Class Term Project Report. Database Implementation, Utah State University, April 2013                Adel M. Abdallah (2012) Design Reservoir Conceptual Data Model . Class Term Project Report, Hydroinformatics, Utah State University Dec 2012.", 
            "title": "Reports and summaries"
        }, 
        {
            "location": "/Publications/#workshops", 
            "text": "Adel Abdallah and David Rosenberg (2015)  WaMDaM Workshop: Discover what water management data is available to run a WEAP model 3 rd  CUAHSI Conference on Hydroinformatics Model and Data Interoperability: From Theory to Practice July 1517, 2015, Tuscaloosa, AL", 
            "title": "Workshops"
        }, 
        {
            "location": "/Publications/#conference-posters", 
            "text": "Adel M. Abdallah and David E. Rosenberg (2015)  A Relational Model to Organize and Synthesize Disparate Systems Water Management Data . Model and Data Interoperability: From Theory to Practice July 1517, 2015, University of Alabama and the National Water Center, Tuscaloosa, AL            Adel M. Abdallah, David E. Rosenberg (2014). WaMDaM: A Data Model to Organize and Synthesize Water Management Data   International Environmental Modelling and Software Society (iEMSs) 7 th  Intl. Congress on Env. Modelling and Software, San Diego, CA, USA.           Adel M. Abdallah and David E. Rosenberg (2013).  A Relational Data Model for Water Management Data  CUASHI Conference on Hydroinformatics and Modeling, Logan, UT: July 1719, 2013.", 
            "title": "Conference posters"
        }, 
        {
            "location": "/Publications/#conference-presentations", 
            "text": "Adel M. Abdallah and David E. Rosenberg (2017).  A New Method to Organize, Identify, and Compare Water Management Data for Systems Models . World Environmental   Water Resources Congress, sacramento, CA: May 2125, 2017.            Adel M. Abdallah and David E. Rosenberg (2015).  Applying Best Data Practices to Work with Water Management Data (WaMDaM) . UC  Invited  UC Davis Workshop. Dec 2015           Adel M. Abdallah (2015).  After 50 years of water data collection and modeling, how can we universally organize water management data?  Utah Water Research Laboratory Alumni Open House: 50 th  Anniversary. Oct 2015             Adel M. Abdallah (2015).  A Relational Model, Workflows, and Parallel Computing to Improve Water Resources Modeling and Management . PhD Dissertation Proposal Defense, Utah State University. Dec 2015          Adel M. Abdallah (2015). WaMDaM: A Data Model to Organize, Share, and Publish Water Management Data Water and Environmnetla Engineering Gradudate Seminar. April 2014            Adel M. Abdallah and David E. Rosenberg (2014).  WaMDaM: A Data Model to Organize and Synthesize Water Management . Data Utah Water Data Users Group 2 nd  Meeting, Salt Lake City, Utah: Jan. 27, 2015.           Adel M. Abdallah and David E. Rosenberg (2014).  WaMDaM: A Data Model to Synthesize and Organize Water Management Data . World Environmental   Water Resources Congress, Portland, OR: June 15, 2014.            Adel M. Abdallah and David E. Rosenberg (2014).  WaMDaM: A Data Model to Organize, Share, and Publish Water Management Data  American Water Resources Association (AWRA) Spring Specialty Conference\". Snowbird, Utah, USA. May 1214, 2014           Adel M. Abdallah and David E. Rosenberg (2014). Data Model and High Performance Computing Tools to Advance Water Resources Management and Modeling .CIWater Symposium. Salt lake City, Utah. Feb 2014.           Adel M. Abdallah (2013).  Design a Database to Manage Water Reservoir Data . Public outreach. CIWater Symposium May 2013. Salt Lake City, Utah.", 
            "title": "Conference presentations"
        }, 
        {
            "location": "/OpenSource/", 
            "text": "Open Source\n\n\nWaMDaM is an \nopen-source\n and open-science project under the \nBSD 3-Clause License\n. We invite the systems modeling and hydroinformatics communities to use, experiment with, and provide feedback on WaMDaM.   \n\n\nAll source-code and documentations are available on the \nWaMDaM Project GitHub\n\n\nUltimately we aspire to improve WaMDaM and work towards the goal of developing a standard to share and publish systems water management data.", 
            "title": "Open Source"
        }, 
        {
            "location": "/OpenSource/#open-source", 
            "text": "WaMDaM is an  open-source  and open-science project under the  BSD 3-Clause License . We invite the systems modeling and hydroinformatics communities to use, experiment with, and provide feedback on WaMDaM.     All source-code and documentations are available on the  WaMDaM Project GitHub  Ultimately we aspire to improve WaMDaM and work towards the goal of developing a standard to share and publish systems water management data.", 
            "title": "Open Source"
        }, 
        {
            "location": "/Limitations/", 
            "text": "Limitations and Future Work\n\n\nThe design of WaMDaM and its quest towards generality have three main limitations which constitute opportunities for future work. \n\n\nLimitation 1: Use cases/datasets\n\n\nThe identified four use cases are basic examples and do not necessarily cover the complexity of the domain of systems water management nor do they cover all the possibilities of how the community of users want to use data. The reviewed data systems and the key features are not necessarily comprehensive of the large inventory of existing systems and the complexity of their data. The used twelve data sources are example datasets and do not necessarily represent the diversity of used data in the field. The example controlled vocabulary are preliminary and need a robust method on how to define and expand them. \n\n\nFuture work may test and improve WaMDaM abilities to work with a larger set of use cases, other models and their results, and data sources in other study areas. With a larger set of data, future work is needed to create a more robust method to define, relate, specify terms for water management data and expand the list of available vocabularies similar to the work on semantic annotation for hydrologic sciences by Piasecki and Beran (2009). This is especially needed for the \u201cInstance Name\u201d controlled term because of the large number of infrastructure instances that could reach thousands or even millions. So there is a need for a robust method to name and organize a potentially growing controlled instance names. The method could benefit from the USGS convention of naming their gage stations that include the institution, site code, name and nearby town or and state.\n\n\nLimitation 2: Software\n\n\nThe designed tools to support loading data into WaMDaM database are basic and require further testing and improvement to be more user-friendly. SQLite database and the WaMDaM Wizard in a desktop setting allow one user at-a-time to store and access data. Future work may build a software ecosystem to allow multiple users to store, access, visualize, and share data using a suite of webservers and tools. Such ecosystem would need to define a standardized machine-readable data encoding method to exchange data over the web and between models. Building additional data importers into WaMDaM would speed data loading and validations in WaMDaM and thus enable larger data integration and discovery. Further participation by others will expand usefulness of a future WaMDaM data system.\n\n\nLimitation 3: Community/Users\n\n\nThroughout WaMDaM development, we presented and discussed WaMDaM goals, use cases, designs, and results in eight regional, national, and international conferences, workshops, and professional meetings. We solicited informal feedback at different stages of the development from collaborators at seven different universities. It is by no means a representative of the water resources community but provided us with important insights. Future improvements should involve a larger community with more formal structure like surveys to guide a more robust and generic information model. \n\n\nWe introduce WaMDaM method as a beginning to solve the problem within the bounded limitations above. It will become more useful as users\n\n\n\n\nBuild more software tools to automate loading data into WaMDaM\n\n\nFeed WaMDaM with more diverse datasets in other areas\n\n\nAccurately register the datasets native terms\n\n\nShare and publish their WaMDaM data with others.\n\n\n\n\nAlthough the development of WaMDaM has focused on water management data, none of the information model concepts are necessarily exclusive to water management. In principal, WaMDaM could be used for other systems based data like for water, energy, and food nexus but that is yet to be tested and demonstrated with use cases. \n\n\nInvitation\n\n\nWe invite the systems modeling and hydroinformatics community to experiment with and provide feedback on WaMDaM to improve it and work towards the goal of developing a standard as the basis for a software ecosystem to organize, visualize, publish, and discover systems water management data over the web. Interested users can submit suggestions by creating issues on GitHub at \nhttps://github.com/WamdamProject/WaMDaM-software-ecosystem/issues\n.", 
            "title": "Limitations"
        }, 
        {
            "location": "/Limitations/#limitations-and-future-work", 
            "text": "The design of WaMDaM and its quest towards generality have three main limitations which constitute opportunities for future work.", 
            "title": "Limitations and Future Work"
        }, 
        {
            "location": "/Limitations/#limitation-1-use-casesdatasets", 
            "text": "The identified four use cases are basic examples and do not necessarily cover the complexity of the domain of systems water management nor do they cover all the possibilities of how the community of users want to use data. The reviewed data systems and the key features are not necessarily comprehensive of the large inventory of existing systems and the complexity of their data. The used twelve data sources are example datasets and do not necessarily represent the diversity of used data in the field. The example controlled vocabulary are preliminary and need a robust method on how to define and expand them.   Future work may test and improve WaMDaM abilities to work with a larger set of use cases, other models and their results, and data sources in other study areas. With a larger set of data, future work is needed to create a more robust method to define, relate, specify terms for water management data and expand the list of available vocabularies similar to the work on semantic annotation for hydrologic sciences by Piasecki and Beran (2009). This is especially needed for the \u201cInstance Name\u201d controlled term because of the large number of infrastructure instances that could reach thousands or even millions. So there is a need for a robust method to name and organize a potentially growing controlled instance names. The method could benefit from the USGS convention of naming their gage stations that include the institution, site code, name and nearby town or and state.", 
            "title": "Limitation 1: Use cases/datasets"
        }, 
        {
            "location": "/Limitations/#limitation-2-software", 
            "text": "The designed tools to support loading data into WaMDaM database are basic and require further testing and improvement to be more user-friendly. SQLite database and the WaMDaM Wizard in a desktop setting allow one user at-a-time to store and access data. Future work may build a software ecosystem to allow multiple users to store, access, visualize, and share data using a suite of webservers and tools. Such ecosystem would need to define a standardized machine-readable data encoding method to exchange data over the web and between models. Building additional data importers into WaMDaM would speed data loading and validations in WaMDaM and thus enable larger data integration and discovery. Further participation by others will expand usefulness of a future WaMDaM data system.", 
            "title": "Limitation 2: Software"
        }, 
        {
            "location": "/Limitations/#limitation-3-communityusers", 
            "text": "Throughout WaMDaM development, we presented and discussed WaMDaM goals, use cases, designs, and results in eight regional, national, and international conferences, workshops, and professional meetings. We solicited informal feedback at different stages of the development from collaborators at seven different universities. It is by no means a representative of the water resources community but provided us with important insights. Future improvements should involve a larger community with more formal structure like surveys to guide a more robust and generic information model.   We introduce WaMDaM method as a beginning to solve the problem within the bounded limitations above. It will become more useful as users   Build more software tools to automate loading data into WaMDaM  Feed WaMDaM with more diverse datasets in other areas  Accurately register the datasets native terms  Share and publish their WaMDaM data with others.   Although the development of WaMDaM has focused on water management data, none of the information model concepts are necessarily exclusive to water management. In principal, WaMDaM could be used for other systems based data like for water, energy, and food nexus but that is yet to be tested and demonstrated with use cases.", 
            "title": "Limitation 3: Community/Users"
        }, 
        {
            "location": "/Limitations/#invitation", 
            "text": "We invite the systems modeling and hydroinformatics community to experiment with and provide feedback on WaMDaM to improve it and work towards the goal of developing a standard as the basis for a software ecosystem to organize, visualize, publish, and discover systems water management data over the web. Interested users can submit suggestions by creating issues on GitHub at  https://github.com/WamdamProject/WaMDaM-software-ecosystem/issues .", 
            "title": "Invitation"
        }, 
        {
            "location": "/SponsorsCredit/", 
            "text": "Sponsors and Credit\n\n\nFunding\n\n\nWaMDaM and related software designs have been developed under funding from several different sources. It was primarily supported by the National Science Foundation \n(NSF)\n under the \nCI-Water Project\n grant 1135482 and later from the \niUtah Project\n under Grant 1208732. \n\nUtah Water Research Lab\n at Utah State University, Logan Utah provided additional funding through Utah Mineral Lease Funds. \n\n\nAcknowledgment\n\n\nThe WaMDaM work presented here represents a five-year effort with coordination and involvement from water resources engineers and modelers who are similarly trying to advance water modeling and data capabilities.  \n\n\nThe following people at eight institutions provided valuable feedback and insights into earlier designs and materials, they shared models and datasets, or exchanged informal discussions on WaMDaM design and its software at different stages of its development.   \n\n\n\n\n\n\nUtah Water Research Laboratory and Utah State University\n \n\nDavid Tarboton, Jeffery Horsburgh, Pabitra Dash, Toney Castronova, Stephanie Reeder     \n\n\n\n\n\n\nUniversity of Manchester, UK\n   \n\nJulien Harou, Stephen Knox, and Philipp Meier\n\n\n\n\n\n\nUniversity of California, Davis\n \n\nJosue Medellin-Azuara, Quinn Hart, Jay Lund\n\n\n\n\n\n\nUniversity of Massachusetts Amhers\n  \n\nDavid Rheinheimer  \n\n\n\n\n\n\nUtah Division of Water Resources\n\nCraig Miller\n\n\n\n\n\n\nUniversity of Utah\n \n\nSteve Burian, Erfan Goharian     \n\n\n\n\n\n\nUniversity of Wyoming\n \n\nFred Ogden, Yoshiyuki Zen Igarashi \n\n\n\n\n\n\nBrigham Young University, Utah\n \n\nDan Ames, Nathan Swain\n\n\n\n\n\n\nSpecial thanks to the \nODM2\n team for promoting #OpenScience by publishing their source code. There is no doubt that WaMDaM development has benefited from the ideas and tools used in ODM2.\n\n\nAdel Abdallah appreciates the hospitality of Steve Burian and his \n Urban Water Research Group \n at the \n University of Utah \n, Salt Lake City for hosting him as a Visiting Scholar during 2014-2018 while developing WaMDaM. Adel also enjoyed being part of the \n\nGlobal Change \n Sustainability Center\n and has learned much from their interdisciplinary Seminar Series.\n\n\nProgrammers\n\n\nThese talented people helped in implementing and testing different aspects of the pseudocode of the WaMDaM Wizard and adapting the controlled vocabulary system. Stephanie Reeder and Pabitra Dash provided valuable insights into the early design architecture.   \n\n\n\n\nKevin Larry  \n\n\nKwang Yingjien   \n\n\nJose Guerrero  \n\n\n\n\nAppreciation\n\n\nAdel M. Abdallah is especially thankful to the following organizations for their funding through scholarships and awards  \n\n\n\n\n\n\nAmerican Public Works Association, Intermountain Section. Diversity Graduate Scholarship, 2018  \n\n\n\n\n\n\nAmerican Public Works Association, Utah Chapter Graduate Scholarship, 2016  \n\n\n\n\n\n\nPresident's Award and Scholarship. Utah State University Student Association, 2015  \n\n\n\n\n\n\nPaper Competition Scholarship, \"2015 J. Paul Riley AWRA Utah Section: Student Water\nConference \n Paper Competition\" 2015\n\n\n\n\n\n\nUtah Water Users Association Scholarship, 2013  \n\n\n\n\n\n\nGraduate Enhancement Award. Graduate Student Senate at Utah State University, 2013 \n\n\n\n\n\n\nPhD Research Assistantship. Utah State University 2012-2018\n\n\n\n\n\n\nDisclaimer\n\n\nAny opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.", 
            "title": "Sponsors and Credit"
        }, 
        {
            "location": "/SponsorsCredit/#sponsors-and-credit", 
            "text": "", 
            "title": "Sponsors and Credit"
        }, 
        {
            "location": "/SponsorsCredit/#funding", 
            "text": "WaMDaM and related software designs have been developed under funding from several different sources. It was primarily supported by the National Science Foundation  (NSF)  under the  CI-Water Project  grant 1135482 and later from the  iUtah Project  under Grant 1208732.  Utah Water Research Lab  at Utah State University, Logan Utah provided additional funding through Utah Mineral Lease Funds.", 
            "title": "Funding"
        }, 
        {
            "location": "/SponsorsCredit/#acknowledgment", 
            "text": "The WaMDaM work presented here represents a five-year effort with coordination and involvement from water resources engineers and modelers who are similarly trying to advance water modeling and data capabilities.    The following people at eight institutions provided valuable feedback and insights into earlier designs and materials, they shared models and datasets, or exchanged informal discussions on WaMDaM design and its software at different stages of its development.       Utah Water Research Laboratory and Utah State University   \nDavid Tarboton, Jeffery Horsburgh, Pabitra Dash, Toney Castronova, Stephanie Reeder         University of Manchester, UK     \nJulien Harou, Stephen Knox, and Philipp Meier    University of California, Davis   \nJosue Medellin-Azuara, Quinn Hart, Jay Lund    University of Massachusetts Amhers    \nDavid Rheinheimer      Utah Division of Water Resources \nCraig Miller    University of Utah   \nSteve Burian, Erfan Goharian         University of Wyoming   \nFred Ogden, Yoshiyuki Zen Igarashi     Brigham Young University, Utah   \nDan Ames, Nathan Swain    Special thanks to the  ODM2  team for promoting #OpenScience by publishing their source code. There is no doubt that WaMDaM development has benefited from the ideas and tools used in ODM2.  Adel Abdallah appreciates the hospitality of Steve Burian and his   Urban Water Research Group   at the   University of Utah  , Salt Lake City for hosting him as a Visiting Scholar during 2014-2018 while developing WaMDaM. Adel also enjoyed being part of the  Global Change   Sustainability Center  and has learned much from their interdisciplinary Seminar Series.", 
            "title": "Acknowledgment"
        }, 
        {
            "location": "/SponsorsCredit/#programmers", 
            "text": "These talented people helped in implementing and testing different aspects of the pseudocode of the WaMDaM Wizard and adapting the controlled vocabulary system. Stephanie Reeder and Pabitra Dash provided valuable insights into the early design architecture.      Kevin Larry    Kwang Yingjien     Jose Guerrero", 
            "title": "Programmers"
        }, 
        {
            "location": "/SponsorsCredit/#appreciation", 
            "text": "Adel M. Abdallah is especially thankful to the following organizations for their funding through scholarships and awards      American Public Works Association, Intermountain Section. Diversity Graduate Scholarship, 2018      American Public Works Association, Utah Chapter Graduate Scholarship, 2016      President's Award and Scholarship. Utah State University Student Association, 2015      Paper Competition Scholarship, \"2015 J. Paul Riley AWRA Utah Section: Student Water\nConference   Paper Competition\" 2015    Utah Water Users Association Scholarship, 2013      Graduate Enhancement Award. Graduate Student Senate at Utah State University, 2013     PhD Research Assistantship. Utah State University 2012-2018", 
            "title": "Appreciation"
        }, 
        {
            "location": "/SponsorsCredit/#disclaimer", 
            "text": "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/License/", 
            "text": "BSD 3-Clause License\n\n\n\n\nBerkeley Software Distribution (BSD)\n\n\nCopyright \n 2018, Water Management Data Model\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/License/#bsd-3-clause-license", 
            "text": "Berkeley Software Distribution (BSD)  Copyright   2018, Water Management Data Model\nAll rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.    Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "BSD 3-Clause License"
        }, 
        {
            "location": "/Getting_started/Steps/", 
            "text": "Getting Started\n\n\nFollow these eight steps in order to install WaMDaM Wizard, populate your data into WaMDaM SQLite database, and implement use cases. \n\n\n1. Install WaMDaM Wizard\n\n\nWaMDaM Wizard is a desktop data loader from a spreadsheet template to a SQLite database. The SQLite database is created based on the WaMDaM data model. \nDownload the software for Windows 7 or 10 64 bit from the table below. You also can find out all the \nWaMDaM_Wizard releases\n on GitHub.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose one\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nExecutable (.exe) [230 MB]\n\n\nDownload\n\n\nGood option if you don't have Admin access to install it\n\n\n\n\n\n\nInstaller (msi) [27 MB]\n\n\nDownload\n\n\nLighter to donwload and probably faster to run\n\n\n\n\n\n\nRun from source code\n\n\n\n\nGood option to debug potential issues and improve it\n\n\n\n\n\n\n\n\nOnce you installed the Wizard, double click at the Wizard's shortcut and this main window should appear.  \n\n\n\n\n2. Connect to SQLite\n\n\nIn WaMDaM Wizard you can either create and connect to a new or existing SQLite database instance on your machine. The Wizard automatically creats a blank WaMDaM SQLite file for you based on WaMDaM data model schema.   \n\n\n3. Prepare your data into Excel\n\n\nFollow the \ninstructions here\n on how to prepare your data into WaMDaM Excel Workbook and register terms with controlled vocabulary. \n\n\n4. Use the Wizard importers\n\n\n\n\nImport from Excel workbooks your prepared in Step 3\n\n\nImporters time series data from CUAHSI\n\n\nImport reservoir related data from the US Reclamation Water Information System. \n\n\n\n\n5. Open the SQLite database\n\n\nUse the SQLite Manager to inspect the loaded data into WaMDaM. If you dont have it, download and install the Mozilla Firefox SQLite Manager Add-on and use it to open the SQLite database file. \nFollow these \nsteps\n here.    \n\n\n6. Execute use case queries\n\n\nUse and adapt queries from WaMDaM use cases and execute them in the SQLite Manager. \n\n\n7. Compare scenarios\n\n\n8. Visualize query results\n\n\nUse and adapt Python scripts to v", 
            "title": "Steps"
        }, 
        {
            "location": "/Getting_started/Steps/#getting-started", 
            "text": "Follow these eight steps in order to install WaMDaM Wizard, populate your data into WaMDaM SQLite database, and implement use cases.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Getting_started/Steps/#1-install-wamdam-wizard", 
            "text": "WaMDaM Wizard is a desktop data loader from a spreadsheet template to a SQLite database. The SQLite database is created based on the WaMDaM data model. \nDownload the software for Windows 7 or 10 64 bit from the table below. You also can find out all the  WaMDaM_Wizard releases  on GitHub.       Choose one   Note      Executable (.exe) [230 MB]  Download  Good option if you don't have Admin access to install it    Installer (msi) [27 MB]  Download  Lighter to donwload and probably faster to run    Run from source code   Good option to debug potential issues and improve it     Once you installed the Wizard, double click at the Wizard's shortcut and this main window should appear.", 
            "title": "1. Install WaMDaM Wizard"
        }, 
        {
            "location": "/Getting_started/Steps/#2-connect-to-sqlite", 
            "text": "In WaMDaM Wizard you can either create and connect to a new or existing SQLite database instance on your machine. The Wizard automatically creats a blank WaMDaM SQLite file for you based on WaMDaM data model schema.", 
            "title": "2. Connect to SQLite"
        }, 
        {
            "location": "/Getting_started/Steps/#3-prepare-your-data-into-excel", 
            "text": "Follow the  instructions here  on how to prepare your data into WaMDaM Excel Workbook and register terms with controlled vocabulary.", 
            "title": "3. Prepare your data into Excel"
        }, 
        {
            "location": "/Getting_started/Steps/#4-use-the-wizard-importers", 
            "text": "Import from Excel workbooks your prepared in Step 3  Importers time series data from CUAHSI  Import reservoir related data from the US Reclamation Water Information System.", 
            "title": "4. Use the Wizard importers"
        }, 
        {
            "location": "/Getting_started/Steps/#5-open-the-sqlite-database", 
            "text": "Use the SQLite Manager to inspect the loaded data into WaMDaM. If you dont have it, download and install the Mozilla Firefox SQLite Manager Add-on and use it to open the SQLite database file. \nFollow these  steps  here.", 
            "title": "5. Open the SQLite database"
        }, 
        {
            "location": "/Getting_started/Steps/#6-execute-use-case-queries", 
            "text": "Use and adapt queries from WaMDaM use cases and execute them in the SQLite Manager.", 
            "title": "6. Execute use case queries"
        }, 
        {
            "location": "/Getting_started/Steps/#7-compare-scenarios", 
            "text": "", 
            "title": "7. Compare scenarios"
        }, 
        {
            "location": "/Getting_started/Steps/#8-visualize-query-results", 
            "text": "Use and adapt Python scripts to v", 
            "title": "8. Visualize query results"
        }, 
        {
            "location": "/Getting_started/PrepareData/", 
            "text": "Prepare your data\n\n\nDownload the WaMDaM Workbook\n\n\nTemplates for Input Data to prepare your data into it. Each dataset into one workbook\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownload\n\n\n\n\nUse it for\n\n\n\n\n\n\n\n\n\n\nWaMDaM Workbook Template\n\n\nDownload\n\n\nGeneric template for any data source to WaMDaM\n\n\n\n\n\n\n\n\nData Preparation Utility\n\n\n\n\n\n\n\n\nDownload\n\n\n\n\nUse it for\n\n\n\n\n\n\n\n\n\n\nPrepre shapefile template\n\n\nDownload\n\n\nTransform the shapefile columns into WaMDaM sheets\n\n\n\n\n\n\nPrepare time series template\n\n\nDownload\n\n\nTransform time series data into WaMDaM sheets\n\n\n\n\n\n\nPrepare seasonal data template\n\n\nDownload\n\n\nTransform seasonal data into WaMDaM sheets\n\n\n\n\n\n\n\n\nWhy Excel?\n\n\nWe chose Excel as a generic input data medium with a custom Excel workbook that has 17 sheets with fixed column headers for the main tables of input data in WaMDaM. Each dataset is prepared to a single workbook one-at-a-time. The sheets are related with each other through dropdown lists to help users for example to relate metadata elements to the attributes and data values\n\n\nThe Wizard maps all the bridge tables\u2019 complex relationships and users do not need to know anything about primary or foreign keys.\n\n\nPreprare data order\n\n\nFirst\n: Load the controlled vocabulary or leave them blank.  \n\nControlled vocabulary are available in the template workbook and users can update them in a button on the workbook\u2019s homepage sheet. The button calls the online registry application user interface and updates the list of vocabularies in the sheet. Then the CVs are available as dropdown lists in each sheet where they apply.  \n\n\nSecond\n: Define metadata that will be used for the Attributes and Instances.   \n\n\nThird\n: Define the data structure of Object Types and Attributes. \n\n\nFourth\n: Add the master network, scenario, and nodes and links. \n\n\nFifth\n: Load data values to each attribute of each Instance. \n\n\nSimple case\n\n\nUsers have to populate at least six sheets for any dataset and they can populate more as the complexity of the dataset increases. In a simple case, the three sheets of Organizations\nPeople, Sources\nMethods, Networks\nScenarios can be populated with only two rows each.", 
            "title": "Prepare Data"
        }, 
        {
            "location": "/Getting_started/PrepareData/#prepare-your-data", 
            "text": "", 
            "title": "Prepare your data"
        }, 
        {
            "location": "/Getting_started/PrepareData/#download-the-wamdam-workbook", 
            "text": "Templates for Input Data to prepare your data into it. Each dataset into one workbook       Download   Use it for      WaMDaM Workbook Template  Download  Generic template for any data source to WaMDaM", 
            "title": "Download the WaMDaM Workbook"
        }, 
        {
            "location": "/Getting_started/PrepareData/#data-preparation-utility", 
            "text": "Download   Use it for      Prepre shapefile template  Download  Transform the shapefile columns into WaMDaM sheets    Prepare time series template  Download  Transform time series data into WaMDaM sheets    Prepare seasonal data template  Download  Transform seasonal data into WaMDaM sheets", 
            "title": "Data Preparation Utility"
        }, 
        {
            "location": "/Getting_started/PrepareData/#why-excel", 
            "text": "We chose Excel as a generic input data medium with a custom Excel workbook that has 17 sheets with fixed column headers for the main tables of input data in WaMDaM. Each dataset is prepared to a single workbook one-at-a-time. The sheets are related with each other through dropdown lists to help users for example to relate metadata elements to the attributes and data values  The Wizard maps all the bridge tables\u2019 complex relationships and users do not need to know anything about primary or foreign keys.", 
            "title": "Why Excel?"
        }, 
        {
            "location": "/Getting_started/PrepareData/#preprare-data-order", 
            "text": "First : Load the controlled vocabulary or leave them blank.   \nControlled vocabulary are available in the template workbook and users can update them in a button on the workbook\u2019s homepage sheet. The button calls the online registry application user interface and updates the list of vocabularies in the sheet. Then the CVs are available as dropdown lists in each sheet where they apply.    Second : Define metadata that will be used for the Attributes and Instances.     Third : Define the data structure of Object Types and Attributes.   Fourth : Add the master network, scenario, and nodes and links.   Fifth : Load data values to each attribute of each Instance.", 
            "title": "Preprare data order"
        }, 
        {
            "location": "/Getting_started/PrepareData/#simple-case", 
            "text": "Users have to populate at least six sheets for any dataset and they can populate more as the complexity of the dataset increases. In a simple case, the three sheets of Organizations People, Sources Methods, Networks Scenarios can be populated with only two rows each.", 
            "title": "Simple case"
        }, 
        {
            "location": "/Getting_started/Use_Wizard/", 
            "text": "Instructions to use the Wizard", 
            "title": "Use Wizard"
        }, 
        {
            "location": "/Getting_started/Use_Wizard/#instructions-to-use-the-wizard", 
            "text": "", 
            "title": "Instructions to use the Wizard"
        }, 
        {
            "location": "/Getting_started/CompareScenarios/", 
            "text": "Compare Scenarios\n\n\nThis utility compares two scenarios of a model within the same Master Network loaded into a WaMDaM SQLite database. It exports the results into an Excel Workbook template.   \n\n\nThe Workbook reports differences and similarities in four spreadsheets: ChangeInTopology, ChangeInMetadata_Topology, ChangeInMetadata_Attributes, and ChangeInDataValues \n\n\nSteps:\n\n\n1. Download the ScenariosComparion Template\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownload\n\n\n\n\nUse it for\n\n\n\n\n\n\n\n\n\n\nScenariosComparion Template\n\n\nDownload\n\n\nGeneric template to export scenario comparisons results\n\n\n\n\n\n\n\n\n2. Launch WaMDaM Wizard, If not already connected, connect to the SQLite database with loaded data.\n\n\n3. Click at the Query WaMDaM tab, then click at \"Compare Scenarios of a Network button\". Choose the Model name, Network name and scenarios for comparison. Finally provide the downloaded Workbook template to export results.", 
            "title": "Compare Scenarios"
        }, 
        {
            "location": "/Getting_started/CompareScenarios/#compare-scenarios", 
            "text": "This utility compares two scenarios of a model within the same Master Network loaded into a WaMDaM SQLite database. It exports the results into an Excel Workbook template.     The Workbook reports differences and similarities in four spreadsheets: ChangeInTopology, ChangeInMetadata_Topology, ChangeInMetadata_Attributes, and ChangeInDataValues", 
            "title": "Compare Scenarios"
        }, 
        {
            "location": "/Getting_started/CompareScenarios/#steps", 
            "text": "", 
            "title": "Steps:"
        }, 
        {
            "location": "/Getting_started/CompareScenarios/#1-download-the-scenarioscomparion-template", 
            "text": "Download   Use it for      ScenariosComparion Template  Download  Generic template to export scenario comparisons results", 
            "title": "1. Download the ScenariosComparion Template"
        }, 
        {
            "location": "/Getting_started/CompareScenarios/#2-launch-wamdam-wizard-if-not-already-connected-connect-to-the-sqlite-database-with-loaded-data", 
            "text": "", 
            "title": "2. Launch WaMDaM Wizard, If not already connected, connect to the SQLite database with loaded data."
        }, 
        {
            "location": "/Getting_started/CompareScenarios/#3-click-at-the-query-wamdam-tab-then-click-at-compare-scenarios-of-a-network-button-choose-the-model-name-network-name-and-scenarios-for-comparison-finally-provide-the-downloaded-workbook-template-to-export-results", 
            "text": "", 
            "title": "3. Click at the Query WaMDaM tab, then click at \"Compare Scenarios of a Network button\". Choose the Model name, Network name and scenarios for comparison. Finally provide the downloaded Workbook template to export results."
        }, 
        {
            "location": "/Getting_started/Best_practices/", 
            "text": "", 
            "title": "Best Practices"
        }, 
        {
            "location": "/Getting_started/Use_controlled_vocabularies/", 
            "text": "WaMDaM Controlled Vocabularies\n\n\nCheck out the \nWaMDaM online moderated registry\n that is used to promote consistent terminology (i.e., Controlled Vocabularies-(CVs)) to describe water system components and their attributes across datasets, models, and users, while still retaining the native terms.  \n\n\nRegistering your model's native terms against these CVs will allow you to relate, query, and compare all of your water management data within a single database.", 
            "title": "Use Controlled Vocabularies"
        }, 
        {
            "location": "/Getting_started/Use_controlled_vocabularies/#wamdam-controlled-vocabularies", 
            "text": "Check out the  WaMDaM online moderated registry  that is used to promote consistent terminology (i.e., Controlled Vocabularies-(CVs)) to describe water system components and their attributes across datasets, models, and users, while still retaining the native terms.    Registering your model's native terms against these CVs will allow you to relate, query, and compare all of your water management data within a single database.", 
            "title": "WaMDaM Controlled Vocabularies"
        }, 
        {
            "location": "/UseCases/Application/", 
            "text": "Application\n\n\nDemonstrate how WaMDaM enables systematic data query and comparisons across multiple different models and datasets. \n\n\n\n\nFigure 1:\n Flowchart of the steps that users follow to use WaMDaM   \n\n\nThe Bear River Watershed, USA\n\n\nWe demonstrate four use cases that assist modelers in activities to build water resources models 1) search in datasets for input data needed for a model in a study area, 2) analyze and compare data values to use in a model, 3) identify how the natural and engineered systems are connected and the directions of flow among them, and 4) identify and communicate differences for changes in network topology, metadata, and data values between modeling scenarios. \n\n\nWe used the WaMDaM CVs, Workbook templates, and the WaMDaM Wizard to prepare and load thirteen US national, regional, and local datasets and models into a WaMDaM SQLite database. We integrate and compare the disparate datasets with a focus to assist modelers to analyze input data for models with a focus on the Bear River Watershed that spans three states, Utah, Idaho, and Wyoming (Figure 4; Table 3). The River begins in Utah, flows through Wyoming then Idaho, and ends as the largest source of water to the Great Salt Lake, Utah (UDWR, 2000).  \n\n\nWe prepared each dataset into an Excel Workbook template and registered example native terms with CVs. We then used the WaMDaM Wizard to populate all the data sources into a single WaMDaM SQLite database file on a local computer. The database file is 50 Megabytes with 60 Object Types, 455 Attributes, 16,000 instances, and 210,000 records in the central Mappings table. Once the disparate datasets were loaded into a WaMDaM database, we selected a few locations with water management significance in the Bear River Watershed to query and compare data reported from multiple sources.   \n\n\nThe locations included: 1) Stewart Dam in Idaho which represents the legal beginning of the Lower Bear River Division (Bear River Commission, 1980). Interestingly, the State of Utah datasets include Stewart Dam site in Idaho and the State of Idaho datasets include sites in the Lower Bear River in Utah which offer a good comparison opportunity like for the Stewart Dam, 2) Hyrum Reservoir which is an important facility to store irrigation water in Cache Valley, Utah, 3) Cache County, Utah which is a major water user in the Bear River Watershed, and 4) Flaming Gorge and Shasta large reservoirs outside the Bear River Watershed in Utah/Wyoming and California to verify that WaMDaM is scalable and applicable outside the Bear River Watershed.      \n\n\nFigure 2\n\n\n \n\n\nFigure 2\n The Bear River Watershed in the Western US and example available data sources used to demonstrate WaMDaM. Use cases are for the entire watershed, Lower Bear, Cache County. Large stars from top to bottom are for sites referred to in use cases: Stewart Dam site, Hyrum Reservoir, and the Bear River Migratory Bird Refuge. \n\n\nDatasets and models\n\n\nWe loaded twelve different and models into a single WaMDaM database SQLite file. The datasets cover natural and built water supply and demand, infrastructure connectivity, with different data types, networks and scenarios that cover the WaMDaM capabilities. \nEach of the \ndatasets on GitHub\n below is prepared and copied into a WaMDaM Excel workbook. Then we loaded all of them one-at-a-time into a single SQLite database file.\n\n\n\nTable 1: Summary of example water management datasets used to demonstrate use cases to organize and compare heterogeneous and disparate data sources using WaMDaM to integrate them into a single WaMDaM SQLite database.   \n\n\nDownload the SQLite file and SQLite Manager\n\n\nFollow the \nsteps\n here to use to execute the use cases next\n\n\nUse Cases in the Bear River Watershed, Utah\n\n\nThe following presented use cases help users identify and compare two fundamental aspects of water management data: data values with different types and connectivity of scenarios and networks.  \n\n\nUse case 1\n:\n What data are available to develop a model in a particular watershed?  \n\n\nUse case 2\n:\n What differences are there across datasets in the data values of properties of a water system component?  \n\n\nUse case 3\n:\n How does connectivity of natural and built infrastructure components compare in a particular area across datasets? \n\n\nUse case 4\n:\n What differences are there in network topology, metadata, and input data between two scenarios of a model instance?", 
            "title": "Application"
        }, 
        {
            "location": "/UseCases/Application/#application", 
            "text": "Demonstrate how WaMDaM enables systematic data query and comparisons across multiple different models and datasets.    Figure 1:  Flowchart of the steps that users follow to use WaMDaM", 
            "title": "Application"
        }, 
        {
            "location": "/UseCases/Application/#the-bear-river-watershed-usa", 
            "text": "We demonstrate four use cases that assist modelers in activities to build water resources models 1) search in datasets for input data needed for a model in a study area, 2) analyze and compare data values to use in a model, 3) identify how the natural and engineered systems are connected and the directions of flow among them, and 4) identify and communicate differences for changes in network topology, metadata, and data values between modeling scenarios.   We used the WaMDaM CVs, Workbook templates, and the WaMDaM Wizard to prepare and load thirteen US national, regional, and local datasets and models into a WaMDaM SQLite database. We integrate and compare the disparate datasets with a focus to assist modelers to analyze input data for models with a focus on the Bear River Watershed that spans three states, Utah, Idaho, and Wyoming (Figure 4; Table 3). The River begins in Utah, flows through Wyoming then Idaho, and ends as the largest source of water to the Great Salt Lake, Utah (UDWR, 2000).    We prepared each dataset into an Excel Workbook template and registered example native terms with CVs. We then used the WaMDaM Wizard to populate all the data sources into a single WaMDaM SQLite database file on a local computer. The database file is 50 Megabytes with 60 Object Types, 455 Attributes, 16,000 instances, and 210,000 records in the central Mappings table. Once the disparate datasets were loaded into a WaMDaM database, we selected a few locations with water management significance in the Bear River Watershed to query and compare data reported from multiple sources.     The locations included: 1) Stewart Dam in Idaho which represents the legal beginning of the Lower Bear River Division (Bear River Commission, 1980). Interestingly, the State of Utah datasets include Stewart Dam site in Idaho and the State of Idaho datasets include sites in the Lower Bear River in Utah which offer a good comparison opportunity like for the Stewart Dam, 2) Hyrum Reservoir which is an important facility to store irrigation water in Cache Valley, Utah, 3) Cache County, Utah which is a major water user in the Bear River Watershed, and 4) Flaming Gorge and Shasta large reservoirs outside the Bear River Watershed in Utah/Wyoming and California to verify that WaMDaM is scalable and applicable outside the Bear River Watershed.", 
            "title": "The Bear River Watershed, USA"
        }, 
        {
            "location": "/UseCases/Application/#figure-2", 
            "text": "Figure 2  The Bear River Watershed in the Western US and example available data sources used to demonstrate WaMDaM. Use cases are for the entire watershed, Lower Bear, Cache County. Large stars from top to bottom are for sites referred to in use cases: Stewart Dam site, Hyrum Reservoir, and the Bear River Migratory Bird Refuge.", 
            "title": "Figure 2"
        }, 
        {
            "location": "/UseCases/Application/#datasets-and-models", 
            "text": "We loaded twelve different and models into a single WaMDaM database SQLite file. The datasets cover natural and built water supply and demand, infrastructure connectivity, with different data types, networks and scenarios that cover the WaMDaM capabilities. \nEach of the  datasets on GitHub  below is prepared and copied into a WaMDaM Excel workbook. Then we loaded all of them one-at-a-time into a single SQLite database file.  \nTable 1: Summary of example water management datasets used to demonstrate use cases to organize and compare heterogeneous and disparate data sources using WaMDaM to integrate them into a single WaMDaM SQLite database.", 
            "title": "Datasets and models"
        }, 
        {
            "location": "/UseCases/Application/#download-the-sqlite-file-and-sqlite-manager", 
            "text": "Follow the  steps  here to use to execute the use cases next", 
            "title": "Download the SQLite file and SQLite Manager"
        }, 
        {
            "location": "/UseCases/Application/#use-cases-in-the-bear-river-watershed-utah", 
            "text": "The following presented use cases help users identify and compare two fundamental aspects of water management data: data values with different types and connectivity of scenarios and networks.    Use case 1 :  What data are available to develop a model in a particular watershed?    Use case 2 :  What differences are there across datasets in the data values of properties of a water system component?    Use case 3 :  How does connectivity of natural and built infrastructure components compare in a particular area across datasets?   Use case 4 :  What differences are there in network topology, metadata, and input data between two scenarios of a model instance?", 
            "title": "Use Cases in the Bear River Watershed, Utah"
        }, 
        {
            "location": "/UseCases/Download/", 
            "text": "Download\n\n\nSteps to use the populated SQLite file\n\n\n\n\n\n\nDownload the \nSQLite database file\n {60 MB}\n\n\n\n\n\n\nUse the SQLite Manager Add-on to Mozilla Firefox to query the database. \n\n\n\n\n\n\nDownload Mozilla Firefox web browser \nversion 56\n or older. \n\n  The new Version 57(Firefox Quantum) does not yet support SQLite Manager.  \n\n\n\n\n\n\nUsing Firefox, install \nSQLit Manager Add-on\n. Follow the screenshots below \n\n\n\n\n\n\nNow you're ready to execute the SQL script for each use cases\n\n\n\n\n\n\n\n\n\n\nInstall SQLite Manager Add-on to Mozilla Firefox\n\nhttps://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/\n  \n\n\n   \n\n\n\n\n\n\nCustomize SQLite Manager button to Firefox   \n\n\n   \n\n\n\n\n\n\nAdd SQLite Manager button to Firefox  \n\n\n   \n\n\n\n\n\n\nLaunch SQLite Manager  \n\n\n   \n\n\n\n\n\n\nConnect to a WaMDaM database\n\n   \n\n\n\n\n\n\nExecute and customize SQL queries against the WaMDaM database for use cases", 
            "title": "Download"
        }, 
        {
            "location": "/UseCases/Download/#download", 
            "text": "", 
            "title": "Download"
        }, 
        {
            "location": "/UseCases/Download/#steps-to-use-the-populated-sqlite-file", 
            "text": "Download the  SQLite database file  {60 MB}    Use the SQLite Manager Add-on to Mozilla Firefox to query the database.     Download Mozilla Firefox web browser  version 56  or older.  \n  The new Version 57(Firefox Quantum) does not yet support SQLite Manager.      Using Firefox, install  SQLit Manager Add-on . Follow the screenshots below     Now you're ready to execute the SQL script for each use cases      Install SQLite Manager Add-on to Mozilla Firefox https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/            Customize SQLite Manager button to Firefox            Add SQLite Manager button to Firefox           Launch SQLite Manager           Connect to a WaMDaM database        Execute and customize SQL queries against the WaMDaM database for use cases", 
            "title": "Steps to use the populated SQLite file"
        }, 
        {
            "location": "/UseCases/use_case_1/", 
            "text": "Use case 1\n\n\nWhat data are available to develop a model in a particular watershed?\n   \n\n\nProblem\n\n\nBuilding a water resources model to solve water management and planning problems requires acquiring input data that describe the system. In existing practices, once a modeler selects a model and identifies its required types of input data, they manually search for datasets that contain relevant data. Then a modeler manually maps out the term for each attribute in their model with equivalent attributes in other datasets to math them.  \n\n\nSolution\n\n\nThis use case shows how a modeler can use WaMDaM extensible Objects, Attributes, and controlled vocabularies to more readily and consistently identify available data from the 13 loaded datasets for WEAP and WASH models. Users can use identified data to expand existing WEAP and WASH model instances in the Lower Bear River Watershed Utah (light red in \nthe Bear River Figure\n to the entire Watershed (darker red in \nthe Bear River Figure\n).  \n\n\nFirst, provide the model name (e.g., Dataset name is WEAP) and a min and max longitudes and latitudes of the study area (e.g., Box that includes Bear River Watershed). Second, execute the use case script that uses the registered controlled vocabularies to search for equivalent Attributes that have data values in all the datasets within the provided boundary. The script also identifies the list of Object Types and Attributes required by the model but do not have available data in WaMDaM database.  \n\n\nFor the two models in this use case, the WEAP model has 11 Object Types with 127 Attributes whiles the WASH model has three Object Types with 54 attributes. Using the Reservoir controlled term as a mediator between and the 13 datasets returns all the local native terms: Dam from the US Dams dataset and Reservoir Node from the BRSDM model instance. Similarly, the controlled attribute Volume returns Max_STOR from US Major Dam\u2019s dataset, STORG_ACFT and Capacity from Utah Dams dataset, and Max Storage Capacity from the BRSDM model instance. \n\n\n\n\nFigure 1:\n Example conceptual mapping showing how the use of controlled vocabulary can help retrieve different available native attributes in datasets for reservoirs in the WEAP model instance. \n\n\nSQL queries/WEAP Model\n\n\n\n\n\n\n\n\nQuestion\n\n\nQuery\n\n\nResult (CSV)\n\n\n\n\n\n\n\n\n\n\nIdentify model data requirements\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhich attributes have available data\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhere the data is available in datasets\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhat additional data are needed\n\n\nscript\n\n\nResult\n\n\n\n\n\n\n\n\nSQL queries/WASH Model\n\n\n\n\n\n\n\n\nQuestion\n\n\nQuery\n\n\nResult (CSV)\n\n\n\n\n\n\n\n\n\n\nIdentify model data requirements\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhich attributes have available data\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhere the data is available in datasets\n\n\nscript\n\n\nResult\n\n\n\n\n\n\nWhat additional data are needed\n\n\nscript\n\n\nResult\n\n\n\n\n\n\n\n\nResults\n\n\nIn the query results, WaMDaM shows that five datasets can provide data for 22 attributes in the Bear River WEAP model and there are still 105 attributes that are needed to expand the WEAP model (Table 1). The five datasets are: US Dams Dataset, BRSDM model instance, Utah Dams Dataset, WaDE, and Idaho Flows dataset. Users can also select Categories to narrow their search for available data. For example, searching only for attributes in the Physical and Operational categories and excluding the Water Quality and Cost categories focuses on 65 attributes required in WEAP which reduces the search for the actually needed data in a model instance. The use case also shows that the five data sources can provide for six attributes in the Bear River WASH model while 48 more attributes are still needed. The WASH model uses many ecologic parameters that do not have data values among the datasets in WaMDaM. \n\n\nTable 1:\n Summary of data availability to expand WEAP and WASH models in the Bear River Watershed. Full list is available the use cases online page   \n\n\n\n\n\n\n\n\nAvailability\n\n\nWEAP\n\n\nWASH\n\n\n\n\n\n\n\n\n\n\n\n\ncount of unique attributes\n\n\ncount of unique attributes\n\n\n\n\n\n\nRequired\n\n\n127\n\n\n54\n\n\n\n\n\n\nAvailable\n\n\n105\n\n\n6\n\n\n\n\n\n\nNo data for them\n\n\n43\n\n\n48\n\n\n\n\n\n\n\n\nSignificance\n\n\nThis use case demonstrates how WaMDaM provides a more readily automated and consistent method to identify available (or unavailable) data in multiple datasets that are required by models in a study area. Note that the value of data in WaMDaM increases as far as identifying it for other models, as users add coordinates and register it with controlled vocabulary.", 
            "title": "Use case 1"
        }, 
        {
            "location": "/UseCases/use_case_1/#use-case-1", 
            "text": "What data are available to develop a model in a particular watershed?", 
            "title": "Use case 1"
        }, 
        {
            "location": "/UseCases/use_case_1/#problem", 
            "text": "Building a water resources model to solve water management and planning problems requires acquiring input data that describe the system. In existing practices, once a modeler selects a model and identifies its required types of input data, they manually search for datasets that contain relevant data. Then a modeler manually maps out the term for each attribute in their model with equivalent attributes in other datasets to math them.", 
            "title": "Problem"
        }, 
        {
            "location": "/UseCases/use_case_1/#solution", 
            "text": "This use case shows how a modeler can use WaMDaM extensible Objects, Attributes, and controlled vocabularies to more readily and consistently identify available data from the 13 loaded datasets for WEAP and WASH models. Users can use identified data to expand existing WEAP and WASH model instances in the Lower Bear River Watershed Utah (light red in  the Bear River Figure  to the entire Watershed (darker red in  the Bear River Figure ).    First, provide the model name (e.g., Dataset name is WEAP) and a min and max longitudes and latitudes of the study area (e.g., Box that includes Bear River Watershed). Second, execute the use case script that uses the registered controlled vocabularies to search for equivalent Attributes that have data values in all the datasets within the provided boundary. The script also identifies the list of Object Types and Attributes required by the model but do not have available data in WaMDaM database.    For the two models in this use case, the WEAP model has 11 Object Types with 127 Attributes whiles the WASH model has three Object Types with 54 attributes. Using the Reservoir controlled term as a mediator between and the 13 datasets returns all the local native terms: Dam from the US Dams dataset and Reservoir Node from the BRSDM model instance. Similarly, the controlled attribute Volume returns Max_STOR from US Major Dam\u2019s dataset, STORG_ACFT and Capacity from Utah Dams dataset, and Max Storage Capacity from the BRSDM model instance.    Figure 1:  Example conceptual mapping showing how the use of controlled vocabulary can help retrieve different available native attributes in datasets for reservoirs in the WEAP model instance.", 
            "title": "Solution"
        }, 
        {
            "location": "/UseCases/use_case_1/#sql-queriesweap-model", 
            "text": "Question  Query  Result (CSV)      Identify model data requirements  script  Result    Which attributes have available data  script  Result    Where the data is available in datasets  script  Result    What additional data are needed  script  Result", 
            "title": "SQL queries/WEAP Model"
        }, 
        {
            "location": "/UseCases/use_case_1/#sql-querieswash-model", 
            "text": "Question  Query  Result (CSV)      Identify model data requirements  script  Result    Which attributes have available data  script  Result    Where the data is available in datasets  script  Result    What additional data are needed  script  Result", 
            "title": "SQL queries/WASH Model"
        }, 
        {
            "location": "/UseCases/use_case_1/#results", 
            "text": "In the query results, WaMDaM shows that five datasets can provide data for 22 attributes in the Bear River WEAP model and there are still 105 attributes that are needed to expand the WEAP model (Table 1). The five datasets are: US Dams Dataset, BRSDM model instance, Utah Dams Dataset, WaDE, and Idaho Flows dataset. Users can also select Categories to narrow their search for available data. For example, searching only for attributes in the Physical and Operational categories and excluding the Water Quality and Cost categories focuses on 65 attributes required in WEAP which reduces the search for the actually needed data in a model instance. The use case also shows that the five data sources can provide for six attributes in the Bear River WASH model while 48 more attributes are still needed. The WASH model uses many ecologic parameters that do not have data values among the datasets in WaMDaM.   Table 1:  Summary of data availability to expand WEAP and WASH models in the Bear River Watershed. Full list is available the use cases online page        Availability  WEAP  WASH       count of unique attributes  count of unique attributes    Required  127  54    Available  105  6    No data for them  43  48", 
            "title": "Results"
        }, 
        {
            "location": "/UseCases/use_case_1/#significance", 
            "text": "This use case demonstrates how WaMDaM provides a more readily automated and consistent method to identify available (or unavailable) data in multiple datasets that are required by models in a study area. Note that the value of data in WaMDaM increases as far as identifying it for other models, as users add coordinates and register it with controlled vocabulary.", 
            "title": "Significance"
        }, 
        {
            "location": "/UseCases/use_case_2/", 
            "text": "Use case 2\n\n\nWhat differences are there across datasets in the data values of properties of a water system component?\n \n\n\nProblem\n\n\nOnce modelers have identified the data available for a modeling study, next they need to determine which datasets and values to use in their model. Modelers often use many data management methods to query, manipulate, and join different water management data types (e.g., time series, multi-column arrays) to analyze and prepare them for systems models. Modelers also manually search for descriptive metadata stored separately in many files like PDF documents or HTML pages.   \n\n\nSolution\n\n\nThis use case shows how a modeler can use WaMDaM\u2019s multiple data types, controlled vocabularies, conditional queries, and metadata design features to both query and compare values across datasets.\n We query and compare results for 1) time series and seasonal streamflow below Stewart Dam, Idaho, 2) water use in Cache Valley, Utah, 3) storage elevation curves for Hyrum Reservoir in Utah, and 4) dam height, hydropower purpose, and number of generators for Flaming Gorge and Shasta Reservoirs.  \n\n\nUse Case 2.1\n\n\nWhat differences are there across datasets in flow data values below Stewart Dam in Idaho?\n   \n\n\nUse Case 1 identified four flow datasets available for the site below Stewart Dam in Idaho. These datasets were identified using the controlled node instance name \u201cUSGS 10046500 BEAR RIVER BL STEWART DAM NR MONTPELIER, ID\u201d and the controlled attribute name \u201cFlow\u201d. The datasets are maintained by USGS, Utah Division of Water Resources (UDWR), Idaho Department of Water Resources (IDWR), and the Bear River Commission (Figure 5-A). We use the time series metadata: attribute unit, year type, aggregation statistic, and aggregation interval unit to aggregate and convert all the time series datasets into a comparable cumulative monthly flow in acre-feet in calendar years. The field Year Type (Section 4.2) allowed us to correctly shift years to the same calendar year that started January 1.  \n\n\nSQL scripts and results\n   \n\n\n\n\n\n\n\n\nUse Case\n\n\nQuery\n\n\nResult (csv)\n\n\n\n\n\n\n\n\n\n\nIdentify TimeSeries Seasonal Dual data\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nIdentify aggregate TimeSeries Values\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nIdentify Seasonal Values\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\nPython 2.7 script to plot figures of use case\n\nTo run the Python script, you need to be connected to the Internet. The script reads its data from the csv files hosted on GitHub.\n\n\n\n\n\n\n\n\nUse Case figure\n\n\nPython Script\n\n\nInteractive figure\n\n\n\n\n\n\n\n\n\n\nFigure a\n\n\nscript\n\n\nFigure\n\n\n\n\n\n\nFigure b\n\n\nscript\n\n\nFigure\n\n\n\n\n\n\n\n\nThe resulting traces span 92 years from 1923-2015 and show most datasets are identical except for a few discrepancies in 1996 and 1999 \nFigure 1-B\n. Metadata shows that the PacifiCorp power company collected streamgage data before and after USGS record. PacifiCorp shares raw data (not available to us) with each state that states then interpolates values if data is missing. The IDWR flagged deviated data values for potential errors while the UDWR interpolated missing values. This data discrepancy underscores the importance of comparisons and using source, method, and organizations, and time series contextual metadata to convert and interpret data values for each flow data and help users choose a time series for this site like the UDWR dataset with the longest record. \n\n\nFigure 1\n\n\n \n\nFigure 1:\n Compiled time series data of flow below Stewart Dam, Idaho reported by different agencies over time. [A] 1923 to 2015 and [B] a six-year window that highlights similarities and discrepancies among sources.   \n\n\nFlow data in water management datasets also exist in derived seasonal form and modelers may use them as input to models. The same query also returned seasonal data from a fifth source, the BRSDM model, which has three scenarios for monthly flow (dry, normal, and wet) for the same Stewart Dam site \nFigure 2-A\n. The BRSDM model respectively reported average flows for June as 666, 2,506, and 17,181 acre-ft/month for dry, normal, and wet years. The model materials did not document how seasonal monthly values were derived. But by comparing results to June flow values in the longest UDWR time series record (1923 to 2015) we estimated  the dry and wetter flow scenarios have 48% and 3% probabilities of exceedance \nFigure 2-B\n. These results can help define more representative flow values for models with seasonal-based analysis. \n\n\nPython 2.7 script to plot figures of use case\n \n\nTo run the Python script, you need to be connected to the internet. The script reads its data from the csv files hosted on GitHub.  \n\n\n\n\n\n\n\n\nUse Case figure\n\n\nPython Script\n\n\nInteractive figure\n\n\n\n\n\n\n\n\n\n\nFigure A\n\n\nscript\n\n\nFigure A\n\n\n\n\n\n\nFigure B\n\n\nscript\n\n\nFigure B\n\n\n\n\n\n\n\n\nFigure 2\n\n\n \n\nFigure 2:\n [A] Average monthly flow data at Below Stewart Dam site (same site in Figures 1). Color coded from light to dark blue for dry, normal, and wet year scenarios. [B] A cumulative distribution of the all June flow data in the Utah UDWR dataset to evaluate how well the dry and wet years represent the historic record peak flows. \n\n\nUse Case 2.2\n\n\nWhat differences are there across datasets in water use in Cache County Utah?\n  \n\n\nModelers often require data for agriculture and other water uses, which might be derived or estimated, not measured like discharge in rivers. We use controlled vocabulary, metadata, and multiple data types features to enable querying, aggregating, and comparing all the datasets for agriculture water use in Cache County in the Lower Bear River, Utah. The query used \u201cdiverted flow\u201d controlled term and returns four time series and seasonal water use values with different estimate methods from three datasets: the WEAP and WASH model instances and the WaDE data source \nFigure 3\n. Using \u201cdepleted flow\u201d controlled term returns a fifth time series form the WaDE source (dashed line in Figure 3). We used the source and method descriptions for attributes, node instances, and scenarios to identify how the datasets represent water use in spatial or time extents. Data either represent i) the entire county area annually in one node as diverted or depleted water like the WaDE dataset (two curves), ii) the entire county seasonally across 11 demand sites (WEAP Model 2017), iii) part of the county monthly in one or five sites as in the WEAP 2010 and WASH 2017 models, respectively. Users can query many agriculture water use estimates in multiple datasets and use values that match their models required data for the entire county or part of it, monthly or annually, and for diverted or depleted flow. \n\n\nIn addition to demand data, the query also can return water rights data from the WaDE data source under the controlled Object Type \u201cDemand Site\u201d and attribute name of \u201cFlow\u201d. For example, the \u201cWATER RESEARCH LAB. UTAH STATE UNIVERSITY\u201d has two water rights. One of them is 84 AF/Year and 146 cfs for the beneficiary use descriptor value of \u201cPower\u201d. So WaMDaM organizes descriptive and numeric data for water rights.\n\n\n\n\n\n\n\n\nUse Case\n\n\nQuery\n\n\nResult (csv)\n\n\n\n\n\n\n\n\n\n\nIdentifyDemandSites\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nIdentify Demand Sites Seasonal Values\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nIdentify DemandSites Time Series Values\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nWater Rights\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case figure\n\n\nPython Script\n\n\nInteractive figure\n\n\n\n\n\n\n\n\n\n\nFigure a\n\n\nscript\n\n\nFigure\n\n\n\n\n\n\n\n\nFigure 3\n\n\n \n\nFigure 3:\n Aggregated water demand for Cache County Utah across WEAP and WASH models and the WaDE dataset. Color-coded from light to dark blue for low to high water use. Native attribute terms are in quotes \n\n\nUse Case 2.3\n\n\nWhat differences are there across datasets in volume and elevation curves of a reservoir?\n    \n\n\nMolders also search for data describing multi-attribute series such as reservoir bathymetry (elevation versus storage) to represent the physical capacity of reservoirs in their models. Here, we use the controlled instance name of Hyrum Reservoir and controlled attribute names Volume and Elevation to identify five volume-elevation curves for Hyrum Reservoir from three datasets: USBOR, Utah Dams, and WEAP model datasets. The USBOR Water Info dataset has two time series of storage and elevation, which have the same daily time step from January 2010 to May 2017. We plotted both series to empirically derive a storage and elevation curve for this dataset (Figure 8). \n\n\n\n\n\n\n\n\nUse Case\n\n\nQuery (SQL)\n\n\nResult (csv)\n\n\n\n\n\n\n\n\n\n\nNumericValues_otherTypes\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nMultiAttributeValues\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nMergeTimeSeriesValues\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nNumericValues_Metadata\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\nMultipleTimeSeriesColumnsSameTimeStamp\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case figure\n\n\nPython Script\n\n\nInteractive figure\n\n\n\n\n\n\n\n\n\n\nFigure\n\n\nscript\n\n\nFigure\n\n\n\n\n\n\n\n\nMetadata indicate the five curves originate from two sources: the Utah Dams dataset and USBOR who owns the dam. The WEAP model instance used older curves from the UDWR while Utah Dams and USBOR datasets used USBOR source. Next, we discuss the following three comparison insights, which are related to semantics, range of data, and its date of measurement. \nLooking more closely at the \nFigure 4\n results, first, there is a systematic displacement in volume and elevation between the upper red and lower brown sets of curves. The upper red curves indicate \u201clive storage\u201d which does not account for \u201cdead storage\u201d, while the lower brown curves reflect \u201ctotal storage\u201d. The USBOR reported dead storage as 3012 acre-feet at the elevation of 4629.6 feet. We verified this interpretation by subtracting or adding dead storage below the elevation of 4629.6 feet, which reproduced similar lower or upper curves. In the WEAP and WASH models, dead storage is termed \u201cTop of Inactive\u201d and MinCap.   \n\n\nSecond, the Figure 8 curves cover different ranges of volume and elevation. The BOR Water Info Sys. (2017) derived curve represents operational ranges of elevation and storage. The Utah Dams (2016) curve and its equivalent BOR Reservoirs Dataset (2006) curve both represent the full bathymetry range. The identical WEAP model curves have a physical range that extend longer up to 70,000 acre-feet volume and 4,750 feet elevation (not shown). Metadata suggest that this extension could have represented a future scenario that raised the dam height.   \n\n\nThird, the methods metadata show there have been two different bathymetry surveys in 1935 and 2016, which are reflected in the BOR Reservoirs Dataset (2006) and USU WEAP Model 2017 curves (both for total storage). The BOR Reservoirs Dataset (2006) curve has less total storage than the other identical curves in the WEAP model instances that use the 1935 survey. Total storage decreased by 1,179 acre-feet which is 6% of the original storage due to decrease in both the dead and live storage potential. The percentage of dead storage to total storage is relatively high, about 17% in this small reservoir and misrepresenting the total or live storage could affect modeling results.   \n\n\nWaMDaM used the features of CVs, metadata, and multiple data types to readily identify and compare multi-attribute bathymetry curves across datasets that had different semantics, measurement periods, and extrapolated versus measured methods. The comparison helps identify differences in the datasets, improve our contextual understanding of reported data values, and help to select the appropriate curve for modeling. Modelers can follow this data analysis exercise to correctly represent the bathymetry curve for other reservoirs in their models and account for dead and live storage. \n\n\nFigure 4\n\n\n \n\nFigure 4\n: Five volume-elevation curves for Hyrum Reservoir, Utah. Red and brown color-coded curves lighter to darker indicate larger volume at the same elevation. Blue shadings indicate Dead, Live, and Total storage zones for the 2006 BOR survey.\n\n\nUse Case 2.4\n\n\nWhat differences are there across datasets in dam heights, installed hydropower capacity, and number of generators for two reservoirs?\n    \n\n\nModelers may search for attributes with numeric and descriptive values to correctly understand and represent the functions of water systems like modeling hydropower in dams. In this case, we use the controlled Instances of Shasta Reservoir, California and Flaming Gorge Reservoir, Utah to identify, compare, and relate their dam heights, installed hydropower capacity, and number of generators across both the US Dams and the National Hydropower Datasets (Table 1). The dam for Shasta Reservoir is 100 feet higher, has four more installed generators, and five times the installed generation capacity as Flaming Gorge Reservoir. \n\n\n\n\n\n\n\n\nUse Case\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nHydroPower_UT_USDams\n\n\nQuery\n\n\n\n\n\n\n\n\nCompareShastaFlamingGorge\n\n\nQuery\n\n\n\n\n\n\n\n\nHydroPowerPlants_UT\n\n\nQuery\n\n\n\n\n\n\n\n\nHydroPower_CA_USDams\n\n\nQuery\n\n\n\n\n\n\n\n\n\n\nThe Hydropower Dataset should be used to update the US Dams dataset to include Hydropower as a purpose for reservoirs like Hyrum and Jordanelle in Utah that have capacities of 0.5 and 13 Megawatts. The US Dams Dataset has only nine reservoirs in Utah and 127 in California with a Hydropower purpose while the Hydropower dataset has 73 in Utah and 413 plants in California. We used the WaMDaM features of controlled vocabularies of Instance name and multiple data types in descriptor values: \u201cHydropower\u201d, \u201cUT\u201d, \u201cCA\u201d to enable comparisons across two datasets in both Utah and California.\n\n\nTable 1\n: Companion between two major US dams\u2019 height and hydropower from two datasets", 
            "title": "Use case 2"
        }, 
        {
            "location": "/UseCases/use_case_2/#use-case-2", 
            "text": "What differences are there across datasets in the data values of properties of a water system component?", 
            "title": "Use case 2"
        }, 
        {
            "location": "/UseCases/use_case_2/#problem", 
            "text": "Once modelers have identified the data available for a modeling study, next they need to determine which datasets and values to use in their model. Modelers often use many data management methods to query, manipulate, and join different water management data types (e.g., time series, multi-column arrays) to analyze and prepare them for systems models. Modelers also manually search for descriptive metadata stored separately in many files like PDF documents or HTML pages.", 
            "title": "Problem"
        }, 
        {
            "location": "/UseCases/use_case_2/#solution", 
            "text": "This use case shows how a modeler can use WaMDaM\u2019s multiple data types, controlled vocabularies, conditional queries, and metadata design features to both query and compare values across datasets.\n We query and compare results for 1) time series and seasonal streamflow below Stewart Dam, Idaho, 2) water use in Cache Valley, Utah, 3) storage elevation curves for Hyrum Reservoir in Utah, and 4) dam height, hydropower purpose, and number of generators for Flaming Gorge and Shasta Reservoirs.", 
            "title": "Solution"
        }, 
        {
            "location": "/UseCases/use_case_2/#use-case-21", 
            "text": "What differences are there across datasets in flow data values below Stewart Dam in Idaho?      Use Case 1 identified four flow datasets available for the site below Stewart Dam in Idaho. These datasets were identified using the controlled node instance name \u201cUSGS 10046500 BEAR RIVER BL STEWART DAM NR MONTPELIER, ID\u201d and the controlled attribute name \u201cFlow\u201d. The datasets are maintained by USGS, Utah Division of Water Resources (UDWR), Idaho Department of Water Resources (IDWR), and the Bear River Commission (Figure 5-A). We use the time series metadata: attribute unit, year type, aggregation statistic, and aggregation interval unit to aggregate and convert all the time series datasets into a comparable cumulative monthly flow in acre-feet in calendar years. The field Year Type (Section 4.2) allowed us to correctly shift years to the same calendar year that started January 1.    SQL scripts and results         Use Case  Query  Result (csv)      Identify TimeSeries Seasonal Dual data  Query  Result    Identify aggregate TimeSeries Values  Query  Result    Identify Seasonal Values  Query  Result     Python 2.7 script to plot figures of use case \nTo run the Python script, you need to be connected to the Internet. The script reads its data from the csv files hosted on GitHub.     Use Case figure  Python Script  Interactive figure      Figure a  script  Figure    Figure b  script  Figure     The resulting traces span 92 years from 1923-2015 and show most datasets are identical except for a few discrepancies in 1996 and 1999  Figure 1-B . Metadata shows that the PacifiCorp power company collected streamgage data before and after USGS record. PacifiCorp shares raw data (not available to us) with each state that states then interpolates values if data is missing. The IDWR flagged deviated data values for potential errors while the UDWR interpolated missing values. This data discrepancy underscores the importance of comparisons and using source, method, and organizations, and time series contextual metadata to convert and interpret data values for each flow data and help users choose a time series for this site like the UDWR dataset with the longest record.", 
            "title": "Use Case 2.1"
        }, 
        {
            "location": "/UseCases/use_case_2/#figure-1", 
            "text": "Figure 1:  Compiled time series data of flow below Stewart Dam, Idaho reported by different agencies over time. [A] 1923 to 2015 and [B] a six-year window that highlights similarities and discrepancies among sources.     Flow data in water management datasets also exist in derived seasonal form and modelers may use them as input to models. The same query also returned seasonal data from a fifth source, the BRSDM model, which has three scenarios for monthly flow (dry, normal, and wet) for the same Stewart Dam site  Figure 2-A . The BRSDM model respectively reported average flows for June as 666, 2,506, and 17,181 acre-ft/month for dry, normal, and wet years. The model materials did not document how seasonal monthly values were derived. But by comparing results to June flow values in the longest UDWR time series record (1923 to 2015) we estimated  the dry and wetter flow scenarios have 48% and 3% probabilities of exceedance  Figure 2-B . These results can help define more representative flow values for models with seasonal-based analysis.   Python 2.7 script to plot figures of use case   \nTo run the Python script, you need to be connected to the internet. The script reads its data from the csv files hosted on GitHub.       Use Case figure  Python Script  Interactive figure      Figure A  script  Figure A    Figure B  script  Figure B", 
            "title": "Figure 1"
        }, 
        {
            "location": "/UseCases/use_case_2/#figure-2", 
            "text": "Figure 2:  [A] Average monthly flow data at Below Stewart Dam site (same site in Figures 1). Color coded from light to dark blue for dry, normal, and wet year scenarios. [B] A cumulative distribution of the all June flow data in the Utah UDWR dataset to evaluate how well the dry and wet years represent the historic record peak flows.", 
            "title": "Figure 2"
        }, 
        {
            "location": "/UseCases/use_case_2/#use-case-22", 
            "text": "What differences are there across datasets in water use in Cache County Utah?     Modelers often require data for agriculture and other water uses, which might be derived or estimated, not measured like discharge in rivers. We use controlled vocabulary, metadata, and multiple data types features to enable querying, aggregating, and comparing all the datasets for agriculture water use in Cache County in the Lower Bear River, Utah. The query used \u201cdiverted flow\u201d controlled term and returns four time series and seasonal water use values with different estimate methods from three datasets: the WEAP and WASH model instances and the WaDE data source  Figure 3 . Using \u201cdepleted flow\u201d controlled term returns a fifth time series form the WaDE source (dashed line in Figure 3). We used the source and method descriptions for attributes, node instances, and scenarios to identify how the datasets represent water use in spatial or time extents. Data either represent i) the entire county area annually in one node as diverted or depleted water like the WaDE dataset (two curves), ii) the entire county seasonally across 11 demand sites (WEAP Model 2017), iii) part of the county monthly in one or five sites as in the WEAP 2010 and WASH 2017 models, respectively. Users can query many agriculture water use estimates in multiple datasets and use values that match their models required data for the entire county or part of it, monthly or annually, and for diverted or depleted flow.   In addition to demand data, the query also can return water rights data from the WaDE data source under the controlled Object Type \u201cDemand Site\u201d and attribute name of \u201cFlow\u201d. For example, the \u201cWATER RESEARCH LAB. UTAH STATE UNIVERSITY\u201d has two water rights. One of them is 84 AF/Year and 146 cfs for the beneficiary use descriptor value of \u201cPower\u201d. So WaMDaM organizes descriptive and numeric data for water rights.     Use Case  Query  Result (csv)      IdentifyDemandSites  Query  Result    Identify Demand Sites Seasonal Values  Query  Result    Identify DemandSites Time Series Values  Query  Result    Water Rights  Query  Result        Use Case figure  Python Script  Interactive figure      Figure a  script  Figure", 
            "title": "Use Case 2.2"
        }, 
        {
            "location": "/UseCases/use_case_2/#figure-3", 
            "text": "Figure 3:  Aggregated water demand for Cache County Utah across WEAP and WASH models and the WaDE dataset. Color-coded from light to dark blue for low to high water use. Native attribute terms are in quotes", 
            "title": "Figure 3"
        }, 
        {
            "location": "/UseCases/use_case_2/#use-case-23", 
            "text": "What differences are there across datasets in volume and elevation curves of a reservoir?       Molders also search for data describing multi-attribute series such as reservoir bathymetry (elevation versus storage) to represent the physical capacity of reservoirs in their models. Here, we use the controlled instance name of Hyrum Reservoir and controlled attribute names Volume and Elevation to identify five volume-elevation curves for Hyrum Reservoir from three datasets: USBOR, Utah Dams, and WEAP model datasets. The USBOR Water Info dataset has two time series of storage and elevation, which have the same daily time step from January 2010 to May 2017. We plotted both series to empirically derive a storage and elevation curve for this dataset (Figure 8).      Use Case  Query (SQL)  Result (csv)      NumericValues_otherTypes  Query  Result    MultiAttributeValues  Query  Result    MergeTimeSeriesValues  Query  Result    NumericValues_Metadata  Query  Result    MultipleTimeSeriesColumnsSameTimeStamp  Query  Result        Use Case figure  Python Script  Interactive figure      Figure  script  Figure     Metadata indicate the five curves originate from two sources: the Utah Dams dataset and USBOR who owns the dam. The WEAP model instance used older curves from the UDWR while Utah Dams and USBOR datasets used USBOR source. Next, we discuss the following three comparison insights, which are related to semantics, range of data, and its date of measurement. \nLooking more closely at the  Figure 4  results, first, there is a systematic displacement in volume and elevation between the upper red and lower brown sets of curves. The upper red curves indicate \u201clive storage\u201d which does not account for \u201cdead storage\u201d, while the lower brown curves reflect \u201ctotal storage\u201d. The USBOR reported dead storage as 3012 acre-feet at the elevation of 4629.6 feet. We verified this interpretation by subtracting or adding dead storage below the elevation of 4629.6 feet, which reproduced similar lower or upper curves. In the WEAP and WASH models, dead storage is termed \u201cTop of Inactive\u201d and MinCap.     Second, the Figure 8 curves cover different ranges of volume and elevation. The BOR Water Info Sys. (2017) derived curve represents operational ranges of elevation and storage. The Utah Dams (2016) curve and its equivalent BOR Reservoirs Dataset (2006) curve both represent the full bathymetry range. The identical WEAP model curves have a physical range that extend longer up to 70,000 acre-feet volume and 4,750 feet elevation (not shown). Metadata suggest that this extension could have represented a future scenario that raised the dam height.     Third, the methods metadata show there have been two different bathymetry surveys in 1935 and 2016, which are reflected in the BOR Reservoirs Dataset (2006) and USU WEAP Model 2017 curves (both for total storage). The BOR Reservoirs Dataset (2006) curve has less total storage than the other identical curves in the WEAP model instances that use the 1935 survey. Total storage decreased by 1,179 acre-feet which is 6% of the original storage due to decrease in both the dead and live storage potential. The percentage of dead storage to total storage is relatively high, about 17% in this small reservoir and misrepresenting the total or live storage could affect modeling results.     WaMDaM used the features of CVs, metadata, and multiple data types to readily identify and compare multi-attribute bathymetry curves across datasets that had different semantics, measurement periods, and extrapolated versus measured methods. The comparison helps identify differences in the datasets, improve our contextual understanding of reported data values, and help to select the appropriate curve for modeling. Modelers can follow this data analysis exercise to correctly represent the bathymetry curve for other reservoirs in their models and account for dead and live storage.", 
            "title": "Use Case 2.3"
        }, 
        {
            "location": "/UseCases/use_case_2/#figure-4", 
            "text": "Figure 4 : Five volume-elevation curves for Hyrum Reservoir, Utah. Red and brown color-coded curves lighter to darker indicate larger volume at the same elevation. Blue shadings indicate Dead, Live, and Total storage zones for the 2006 BOR survey.", 
            "title": "Figure 4"
        }, 
        {
            "location": "/UseCases/use_case_2/#use-case-24", 
            "text": "What differences are there across datasets in dam heights, installed hydropower capacity, and number of generators for two reservoirs?       Modelers may search for attributes with numeric and descriptive values to correctly understand and represent the functions of water systems like modeling hydropower in dams. In this case, we use the controlled Instances of Shasta Reservoir, California and Flaming Gorge Reservoir, Utah to identify, compare, and relate their dam heights, installed hydropower capacity, and number of generators across both the US Dams and the National Hydropower Datasets (Table 1). The dam for Shasta Reservoir is 100 feet higher, has four more installed generators, and five times the installed generation capacity as Flaming Gorge Reservoir.      Use Case  Query  Result      HydroPower_UT_USDams  Query     CompareShastaFlamingGorge  Query     HydroPowerPlants_UT  Query     HydroPower_CA_USDams  Query      The Hydropower Dataset should be used to update the US Dams dataset to include Hydropower as a purpose for reservoirs like Hyrum and Jordanelle in Utah that have capacities of 0.5 and 13 Megawatts. The US Dams Dataset has only nine reservoirs in Utah and 127 in California with a Hydropower purpose while the Hydropower dataset has 73 in Utah and 413 plants in California. We used the WaMDaM features of controlled vocabularies of Instance name and multiple data types in descriptor values: \u201cHydropower\u201d, \u201cUT\u201d, \u201cCA\u201d to enable comparisons across two datasets in both Utah and California.  Table 1 : Companion between two major US dams\u2019 height and hydropower from two datasets", 
            "title": "Use Case 2.4"
        }, 
        {
            "location": "/UseCases/use_case_3/", 
            "text": "Use case 3\n\n\nHow does connectivity of natural and built infrastructure components compare in a particular area across datasets?\n   \n\n\nProblem\n\n\nAfter identifying data values that describe water systems components, researchers must determine how water supply, demand, and other system components are connected to correctly represent components in models. \n\n\nSolution\n\n\nThis use case employs the features of controlled vocabularies and the connectivity of nodes and links through networks to help modelers search for water system components and their connectivity across datasets. For example, what links flow into and out of Hyrum Reservoir in the Little Bear River Utah? \n\n\nResults show that Hyrum Reservoir supplies two demand sites in the WEAP 2010 model and three different demand sites in the USU WEAP 2017 and WASH models (Figure 1). The latter two models also return flow back into Hyrum Reservoir from Hyrum and Paradise Canals. The WASH model has the same schematic as the USU WEAP 2017 model but uses different labels for its nodes and links (Figure 1-C). Identifying and comparing connectivity between supply and demand sites across datasets can assist molders to more accurately incorporate simplified representations of supply and demand relationships like the WEAP 2010 model or more detailed representations like WEAP 2017 and WASH models into their water allocation models.\n\n\nWaMDaM here enabled a more readily and consistent method to search for water system components as nodes and links and compare their connectivity across sources. This connectivity aspect of is an important improvement over the existing time series data discovery tools which identifies standalone nodes. With WaMDaM, users can identify how and where water flows from and into nodes. Future software tools may help users visualize and filter the results based on model, scenario, object type and categories. \n\n\n\n\n\n\n\n\nUse Case\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nHyrum Reservoir, Utah\n\n\nQuery\n\n\nResult\n csv\n\n\n\n\n\n\nBear River Migratory Bird Refuge, Utah\n\n\nQuery\n\n\nResult\n csv\n\n\n\n\n\n\nShasta Reservoir, California\n\n\nQuery\n\n\n[Result][6] csv\n\n\n\n\n\n\n\n\n \n\nFigure 1\n: Schematics of water system node and link components that flow in or out of Hyrum Reservoir for three models in the Lower Bear River Watershed, Utah. Arrows indicate directions of flow. Nodes or links with the same color and shape belong to same controlled Object Type across models.\n\n\nNext\n\n\nThe next use case allows users to compare similarities and differences in network topology, metadata, and data values between two scenarios of any model in WaMDaM.", 
            "title": "Use case 3"
        }, 
        {
            "location": "/UseCases/use_case_3/#use-case-3", 
            "text": "How does connectivity of natural and built infrastructure components compare in a particular area across datasets?", 
            "title": "Use case 3"
        }, 
        {
            "location": "/UseCases/use_case_3/#problem", 
            "text": "After identifying data values that describe water systems components, researchers must determine how water supply, demand, and other system components are connected to correctly represent components in models.", 
            "title": "Problem"
        }, 
        {
            "location": "/UseCases/use_case_3/#solution", 
            "text": "This use case employs the features of controlled vocabularies and the connectivity of nodes and links through networks to help modelers search for water system components and their connectivity across datasets. For example, what links flow into and out of Hyrum Reservoir in the Little Bear River Utah?   Results show that Hyrum Reservoir supplies two demand sites in the WEAP 2010 model and three different demand sites in the USU WEAP 2017 and WASH models (Figure 1). The latter two models also return flow back into Hyrum Reservoir from Hyrum and Paradise Canals. The WASH model has the same schematic as the USU WEAP 2017 model but uses different labels for its nodes and links (Figure 1-C). Identifying and comparing connectivity between supply and demand sites across datasets can assist molders to more accurately incorporate simplified representations of supply and demand relationships like the WEAP 2010 model or more detailed representations like WEAP 2017 and WASH models into their water allocation models.  WaMDaM here enabled a more readily and consistent method to search for water system components as nodes and links and compare their connectivity across sources. This connectivity aspect of is an important improvement over the existing time series data discovery tools which identifies standalone nodes. With WaMDaM, users can identify how and where water flows from and into nodes. Future software tools may help users visualize and filter the results based on model, scenario, object type and categories.      Use Case  Query  Result      Hyrum Reservoir, Utah  Query  Result  csv    Bear River Migratory Bird Refuge, Utah  Query  Result  csv    Shasta Reservoir, California  Query  [Result][6] csv       Figure 1 : Schematics of water system node and link components that flow in or out of Hyrum Reservoir for three models in the Lower Bear River Watershed, Utah. Arrows indicate directions of flow. Nodes or links with the same color and shape belong to same controlled Object Type across models.", 
            "title": "Solution"
        }, 
        {
            "location": "/UseCases/use_case_3/#next", 
            "text": "The next use case allows users to compare similarities and differences in network topology, metadata, and data values between two scenarios of any model in WaMDaM.", 
            "title": "Next"
        }, 
        {
            "location": "/UseCases/use_case_4/", 
            "text": "Use case 4\n\n\nWhat differences are there in network topology, metadata, and input data between two scenarios of a model instance?\n  \n\n\nProblem\n\n\nModelers use scenarios to simulate how potential management alternatives can affect the system performance in their defined metrics. Modelers often seek to verify and communicate differences for changes they introduce to network topology, metadata, and data values between scenarios. However, when a model or a dataset does not natively support scenario comparisons, modelers have to manually compare the input values. This comparison is challenging for models with a large number of attributes such as WEAP. \n\n\nSolution\n\n\nThis use case employs the scenario and parsimony design features to track changes among scenarios and efficiently store data. To perform scenario comparisons in data loaded to WaMDaM, the Wizard has a comparison function that requires users to select a Model, a Master Network, and two Scenarios. Then a Wizard script queries the ScenarioMappings table and identifies the data that is shared among and unique to each Scenario. Results are exported to an Excel workbook. \n\n\nThe WEAP 2010 and 2016 scenarios share about 9% of the network instances, 1% metadata, and 5 % data values (Table 1). Similarity, the BRSDM model scenarios of dry, normal, and wet have identical network and metadata, share about 80% of data values with 10% unique values to each scenario (details not presented for simplicity). The larger percentage of shared elements among the BRSDM model scenarios means a correspondingly larger savings in database storage (records in the Mappings, Instances, Connections, and DataValuesMapper tables) than the WEAP model scenarios.\n\n\nTable 1: Comparison summary of unique and shared network topology, metadata and data values between two WEAP Bear River Watershed model scenarios\n\n \n\n\nSQL scripts\n\n\nThe SQL scripts to compare scenarios exist here \n\nhttps://github.com/WamdamProject/WaMDaM_Wizard/blob/master/src_1.0/controller/wamdamAPI/GetComapreScenarios.py\n\n\nAn older version of the scripts exist on a private repo. I need to update them and move them here \n\nhttps://github.com/amabdallah/Wizard/tree/Dev/SQL_Queries", 
            "title": "Use case 4"
        }, 
        {
            "location": "/UseCases/use_case_4/#use-case-4", 
            "text": "What differences are there in network topology, metadata, and input data between two scenarios of a model instance?", 
            "title": "Use case 4"
        }, 
        {
            "location": "/UseCases/use_case_4/#problem", 
            "text": "Modelers use scenarios to simulate how potential management alternatives can affect the system performance in their defined metrics. Modelers often seek to verify and communicate differences for changes they introduce to network topology, metadata, and data values between scenarios. However, when a model or a dataset does not natively support scenario comparisons, modelers have to manually compare the input values. This comparison is challenging for models with a large number of attributes such as WEAP.", 
            "title": "Problem"
        }, 
        {
            "location": "/UseCases/use_case_4/#solution", 
            "text": "This use case employs the scenario and parsimony design features to track changes among scenarios and efficiently store data. To perform scenario comparisons in data loaded to WaMDaM, the Wizard has a comparison function that requires users to select a Model, a Master Network, and two Scenarios. Then a Wizard script queries the ScenarioMappings table and identifies the data that is shared among and unique to each Scenario. Results are exported to an Excel workbook.   The WEAP 2010 and 2016 scenarios share about 9% of the network instances, 1% metadata, and 5 % data values (Table 1). Similarity, the BRSDM model scenarios of dry, normal, and wet have identical network and metadata, share about 80% of data values with 10% unique values to each scenario (details not presented for simplicity). The larger percentage of shared elements among the BRSDM model scenarios means a correspondingly larger savings in database storage (records in the Mappings, Instances, Connections, and DataValuesMapper tables) than the WEAP model scenarios.  Table 1: Comparison summary of unique and shared network topology, metadata and data values between two WEAP Bear River Watershed model scenarios", 
            "title": "Solution"
        }, 
        {
            "location": "/UseCases/use_case_4/#sql-scripts", 
            "text": "The SQL scripts to compare scenarios exist here  https://github.com/WamdamProject/WaMDaM_Wizard/blob/master/src_1.0/controller/wamdamAPI/GetComapreScenarios.py  An older version of the scripts exist on a private repo. I need to update them and move them here  https://github.com/amabdallah/Wizard/tree/Dev/SQL_Queries", 
            "title": "SQL scripts"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/", 
            "text": "Design features\n\n\nWe synthesized the design requirements (features, hereafter) from prior approaches in Section 2 with a focus on enabling the key steps to analyze and synthesize data for a water systems model in four use cases.\n\n\nUse cases\n\n\nWater resources modelers and researchers seek to solve integrated water management problems in an area of interest (Brown et al., 2015). They select a modeling tool or develop a new one to solve simulation or optimization water management problems in a study area within a scope like as hydro-economic (Harou et al., 2009), hydro-ecologic (Alminagorta et al., 2016), or priority-based allocation (Sehlke and Jacobson, 2005). Then modelers search among available datasets for input data the model needs in their study area. Having obtained some data, the modeler next needs to determine which datasets and values to use in their model. The molders also need to identify how natural and engineered system components are connected and flow directions among components. Modelers often create modeling scenarios to represent different physical, operation, and socio-economic representations in a systems model. Modelers then seek to identify and communicate differences for changes in network topology, metadata, and data values between the scenarios. We identified four use cases that cover these data query, comparison, and model building activities (Heumann, 2008). \n\n\nThe use cases are formed by four questions that motivate a WaMDaM design to enable them given that none of the prior approaches has the capability to consistently answer all of them altogether. \n\n\n\n\nWhat data are available to develop a model in a particular watershed?\n\n\nHow do data values for properties of system components differ across datasets? \n\n\nWhat differences are there across datasets in connectivity of natural and built infrastructure components in a particular area? \n\n\nWhat differences are there in network topology, metadata, and input data between two scenarios of a model instance?\n\n\n\n\nSynthesized design features and definitions\n\n\nTo answer the use case questions, a new information model must have eight design features that are supported partially in existing systems. Supporting all eight features intends to enables users to systematically query and compare; data availability for models, data values, network connectivity, and scenarios to assist modelers in preparing data for building models. \n\n\nTable 1:\n The identified requirements (i.e., features) that are supported by select data systems and water resources models for a generalized method to organize water management data. An \u201cx\u201d indicates that the feature is supported. WaMDaM is designed to support all of the features. \n\n           \n\n\nFeatures definitions\n\n\nFeature 1\n\n\nThe first feature represents multiple system components (e.g., reservoirs, demand sites, canals) in reusable data objects (i.e., classes or modules) with properties or attributes to describe their qualitative or quantitative data (Connolly and Begg, 2010; Wurbs, 2012; Zagona et al., 2001). This modular representation allows users to reuse existing objects and their attributes or add new ones to satisfy the extensible use (Connolly and Begg, 2010; Goodall et al., 2011; Kokkonen et al., 2003; Pokorn\u00fd, 2006). Most existing data systems and water management models have modular designs but often modularity is limited to a pre-defined set of supported object types. \n\n\nFeature 2\n\n\nThe second feature represents the spatial configuration of system components as networks of nodes (junctions or points) and links between nodes (arcs, connections, curves, lines, or edges of a directed graph) (HydroLogics, 2009; Rossman, 2000; Zeiler, 1999). Networks help users to organize and then search groups of system components that are related for a purpose (e.g., flow of water through connected pipes) for a particular domain (e.g., drinking water supply) in a specific spatial boundary (Loucks et al., 2005). Most the existing data systems support this feature but they use different structures to manage the connectivity of nodes and links. \n\n\nFeature 3\n\n\nThe third feature supports scenarios that represent many physical, operation, and socio-economic configurations of a systems model for current and proposed water management alternatives. These scenarios track or version control changes in the baseline networks and data values. A scenario represents one or more of potentially three changes to a network: i) change in topology like adding or removing an infrastructure component, ii) change in metadata like changing a method or data source of an attribute values, iii) or change data values for one or more attributes of a component. Many of the existing systems support scenarios but no systems support all the three scenario changes. \n\n\nFeature 4\n\n\nThe fourth metadata feature provides ancillary information to help users interpret data values of component attributes. Metadata also helps users maintain the data provenance that is needed to track the history and context of i) sources, ii) methods, iii) people, and iv) organizations that contributed to create a data value (Campbell et al., 2013; Carata et al., 2014; DCMI, 2013; Goodman et al., 2014; Gray et al., 2005; Horsburgh et al., 2008; Pokorn\u00fd, 2006). Separating metadata elements for water management data improves prior approaches that represented them in one table that accept user-specified field-value metadata pairs like in HydraPlatform (Meier et al., 2014) and HarmoniRib (Refsgaard et al., 2005) and are more difficult  to directly query, access, and synthesize. Most of the reviewed systems support adding some metadata but often metadata is either optional or not supported explicitly under those four categories. \n\n\nFeature 5\n\n\nThe fifth feature supports multiple data types that modelers use to represent physical, operational, and descriptive attributes of system components: time series, multi attribute series (i.e., arrays or multi-columns), numeric and descriptor parameters, seasonal parameters, and categorical values. An attribute may apply to all network components as one global attribute or to individual components. For example, a time series of inflow applies to one reservoir component while a second time series of evaporation applies to all reservoirs in the network. Many existing systems support a few data types but store them in binary objects and do not describe data with metadata.  The WaMDaM multiple data types feature allows users to store and access different types of data values for properties of systems components.  \n\n\nFeature 6\n\n\nThe sixth feature provides controlled vocabularies (CVs) as sets of suggested optional terms with definitions for object type, attributes, and names of nodes and links to encourage users to relate and retain their native terms across data sources (Laniak et al., 2013). The CUAHSI CVs system (\nhttp://his.cuahsi.org/mastercvreg/cv11.aspx\n) provides a list of controlled terms for hydrology related observations. \n\n\nFeature 7\n\n\nThe seventh feature supports conditional data queries to allow users to load and retrieve subsets of data based on selected water system components, attributes, metadata, networks, scenarios, and data types in space and time without the need for a third-party software. Many data systems have built-in functionality, which limits the ability to freely query and compare subsets of data and metadata. Supporting conditional queries allows users to query, synthesize, and compare subsets of water management data and use retrieved data in models. \n\n\nFeature 8\n\n\nThe eighth feature uses free and open-source software and requires publishing the source-code in GitHub to allow liberal use of the code, promote reproducibility, and help others further advance the method (Easterbrook, 2014; Gil et al., 2016; Goodman et al., 2014). Many existing data systems are proprietary, require specific tools to access their data, source-code is not available, and there is limited documentation. \n\n\nThese eight features are incompletely supported by existing methods. Supporting all eight features enables users to systematically query and compare; data availability for models, data values, network connectivity, and scenarios to assist modelers in preparing data for building models. The next section describes how WaMDaM is implemented to support these eight described data features to enable integrated data analysis for modeling through the four identified use cases.", 
            "title": "Design Requirment"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#design-features", 
            "text": "We synthesized the design requirements (features, hereafter) from prior approaches in Section 2 with a focus on enabling the key steps to analyze and synthesize data for a water systems model in four use cases.", 
            "title": "Design features"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#use-cases", 
            "text": "Water resources modelers and researchers seek to solve integrated water management problems in an area of interest (Brown et al., 2015). They select a modeling tool or develop a new one to solve simulation or optimization water management problems in a study area within a scope like as hydro-economic (Harou et al., 2009), hydro-ecologic (Alminagorta et al., 2016), or priority-based allocation (Sehlke and Jacobson, 2005). Then modelers search among available datasets for input data the model needs in their study area. Having obtained some data, the modeler next needs to determine which datasets and values to use in their model. The molders also need to identify how natural and engineered system components are connected and flow directions among components. Modelers often create modeling scenarios to represent different physical, operation, and socio-economic representations in a systems model. Modelers then seek to identify and communicate differences for changes in network topology, metadata, and data values between the scenarios. We identified four use cases that cover these data query, comparison, and model building activities (Heumann, 2008).   The use cases are formed by four questions that motivate a WaMDaM design to enable them given that none of the prior approaches has the capability to consistently answer all of them altogether.    What data are available to develop a model in a particular watershed?  How do data values for properties of system components differ across datasets?   What differences are there across datasets in connectivity of natural and built infrastructure components in a particular area?   What differences are there in network topology, metadata, and input data between two scenarios of a model instance?", 
            "title": "Use cases"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#synthesized-design-features-and-definitions", 
            "text": "To answer the use case questions, a new information model must have eight design features that are supported partially in existing systems. Supporting all eight features intends to enables users to systematically query and compare; data availability for models, data values, network connectivity, and scenarios to assist modelers in preparing data for building models.   Table 1:  The identified requirements (i.e., features) that are supported by select data systems and water resources models for a generalized method to organize water management data. An \u201cx\u201d indicates that the feature is supported. WaMDaM is designed to support all of the features.", 
            "title": "Synthesized design features and definitions"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#features-definitions", 
            "text": "", 
            "title": "Features definitions"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-1", 
            "text": "The first feature represents multiple system components (e.g., reservoirs, demand sites, canals) in reusable data objects (i.e., classes or modules) with properties or attributes to describe their qualitative or quantitative data (Connolly and Begg, 2010; Wurbs, 2012; Zagona et al., 2001). This modular representation allows users to reuse existing objects and their attributes or add new ones to satisfy the extensible use (Connolly and Begg, 2010; Goodall et al., 2011; Kokkonen et al., 2003; Pokorn\u00fd, 2006). Most existing data systems and water management models have modular designs but often modularity is limited to a pre-defined set of supported object types.", 
            "title": "Feature 1"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-2", 
            "text": "The second feature represents the spatial configuration of system components as networks of nodes (junctions or points) and links between nodes (arcs, connections, curves, lines, or edges of a directed graph) (HydroLogics, 2009; Rossman, 2000; Zeiler, 1999). Networks help users to organize and then search groups of system components that are related for a purpose (e.g., flow of water through connected pipes) for a particular domain (e.g., drinking water supply) in a specific spatial boundary (Loucks et al., 2005). Most the existing data systems support this feature but they use different structures to manage the connectivity of nodes and links.", 
            "title": "Feature 2"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-3", 
            "text": "The third feature supports scenarios that represent many physical, operation, and socio-economic configurations of a systems model for current and proposed water management alternatives. These scenarios track or version control changes in the baseline networks and data values. A scenario represents one or more of potentially three changes to a network: i) change in topology like adding or removing an infrastructure component, ii) change in metadata like changing a method or data source of an attribute values, iii) or change data values for one or more attributes of a component. Many of the existing systems support scenarios but no systems support all the three scenario changes.", 
            "title": "Feature 3"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-4", 
            "text": "The fourth metadata feature provides ancillary information to help users interpret data values of component attributes. Metadata also helps users maintain the data provenance that is needed to track the history and context of i) sources, ii) methods, iii) people, and iv) organizations that contributed to create a data value (Campbell et al., 2013; Carata et al., 2014; DCMI, 2013; Goodman et al., 2014; Gray et al., 2005; Horsburgh et al., 2008; Pokorn\u00fd, 2006). Separating metadata elements for water management data improves prior approaches that represented them in one table that accept user-specified field-value metadata pairs like in HydraPlatform (Meier et al., 2014) and HarmoniRib (Refsgaard et al., 2005) and are more difficult  to directly query, access, and synthesize. Most of the reviewed systems support adding some metadata but often metadata is either optional or not supported explicitly under those four categories.", 
            "title": "Feature 4"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-5", 
            "text": "The fifth feature supports multiple data types that modelers use to represent physical, operational, and descriptive attributes of system components: time series, multi attribute series (i.e., arrays or multi-columns), numeric and descriptor parameters, seasonal parameters, and categorical values. An attribute may apply to all network components as one global attribute or to individual components. For example, a time series of inflow applies to one reservoir component while a second time series of evaporation applies to all reservoirs in the network. Many existing systems support a few data types but store them in binary objects and do not describe data with metadata.  The WaMDaM multiple data types feature allows users to store and access different types of data values for properties of systems components.", 
            "title": "Feature 5"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-6", 
            "text": "The sixth feature provides controlled vocabularies (CVs) as sets of suggested optional terms with definitions for object type, attributes, and names of nodes and links to encourage users to relate and retain their native terms across data sources (Laniak et al., 2013). The CUAHSI CVs system ( http://his.cuahsi.org/mastercvreg/cv11.aspx ) provides a list of controlled terms for hydrology related observations.", 
            "title": "Feature 6"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-7", 
            "text": "The seventh feature supports conditional data queries to allow users to load and retrieve subsets of data based on selected water system components, attributes, metadata, networks, scenarios, and data types in space and time without the need for a third-party software. Many data systems have built-in functionality, which limits the ability to freely query and compare subsets of data and metadata. Supporting conditional queries allows users to query, synthesize, and compare subsets of water management data and use retrieved data in models.", 
            "title": "Feature 7"
        }, 
        {
            "location": "/DesignDocumentation/Desing_Req/#feature-8", 
            "text": "The eighth feature uses free and open-source software and requires publishing the source-code in GitHub to allow liberal use of the code, promote reproducibility, and help others further advance the method (Easterbrook, 2014; Gil et al., 2016; Goodman et al., 2014). Many existing data systems are proprietary, require specific tools to access their data, source-code is not available, and there is limited documentation.   These eight features are incompletely supported by existing methods. Supporting all eight features enables users to systematically query and compare; data availability for models, data values, network connectivity, and scenarios to assist modelers in preparing data for building models. The next section describes how WaMDaM is implemented to support these eight described data features to enable integrated data analysis for modeling through the four identified use cases.", 
            "title": "Feature 8"
        }, 
        {
            "location": "/DesignDocumentation/DesignApproach/", 
            "text": "Design Approach\n\n\nWe use each of the described eight features to design the information systems and its implementations to organize, manage, query, and compare water resources datasets and models. The use cases guide, prioritize, and demonstrate the design per the  Jim Gray\u2019s recommendation in designing databases (Szalay and Blakeley, 2009). \n\n\nWe use the information model (i.e., conceptual model in relational databases) to relate the key required and optional data and metadata elements (i.e., concepts or constructs) and their relationships to satisfy the first six design features. The information model is independent of any technology or programing language (Connolly and Begg, 2010; Fulton, 2005; Lee, 1999). We satisfy conditional data queries (Feature 7) by using the Relational Database Theory (also referred to as the Relational Model) to physically implement the information model concepts into interrelated tables (Chen, 1976; Codd, 1970).\n\n\nThen we implement the data model in open-source physical database system to populate it with data (Feature #8). We iteratively revised these information, logical, and physical design models dozens of times over the course of four years to satisfy design requirements, use cases, and incorporate feedback from collaborators with the most parsimonious design that demonstrates the use cases (Hey et al., 2009). The following three sub-sections elaborate on the informational, logical, and physical implementations in the WaMDaM design. \n\n\nWe aim for a parsimonious design that efficiently minimizes the number of data and metadata entitles needed to effectively satisfy the eight design features and answer the use case questions (Hey et al., 2009). In a relational model implementation, a database normalization technique is used in an effort to eliminate redundancy and increase design generality and parsimony in metadata (Connolly and Begg, 2010).", 
            "title": "Design Approach"
        }, 
        {
            "location": "/DesignDocumentation/DesignApproach/#design-approach", 
            "text": "We use each of the described eight features to design the information systems and its implementations to organize, manage, query, and compare water resources datasets and models. The use cases guide, prioritize, and demonstrate the design per the  Jim Gray\u2019s recommendation in designing databases (Szalay and Blakeley, 2009).   We use the information model (i.e., conceptual model in relational databases) to relate the key required and optional data and metadata elements (i.e., concepts or constructs) and their relationships to satisfy the first six design features. The information model is independent of any technology or programing language (Connolly and Begg, 2010; Fulton, 2005; Lee, 1999). We satisfy conditional data queries (Feature 7) by using the Relational Database Theory (also referred to as the Relational Model) to physically implement the information model concepts into interrelated tables (Chen, 1976; Codd, 1970).  Then we implement the data model in open-source physical database system to populate it with data (Feature #8). We iteratively revised these information, logical, and physical design models dozens of times over the course of four years to satisfy design requirements, use cases, and incorporate feedback from collaborators with the most parsimonious design that demonstrates the use cases (Hey et al., 2009). The following three sub-sections elaborate on the informational, logical, and physical implementations in the WaMDaM design.   We aim for a parsimonious design that efficiently minimizes the number of data and metadata entitles needed to effectively satisfy the eight design features and answer the use case questions (Hey et al., 2009). In a relational model implementation, a database normalization technique is used in an effort to eliminate redundancy and increase design generality and parsimony in metadata (Connolly and Begg, 2010).", 
            "title": "Design Approach"
        }, 
        {
            "location": "/DesignDocumentation/info_model/", 
            "text": "WaMDaM Information Model\n\n\nFor the first six design features, we use the Unified Modeling Language (UML) to represent the relationships among data and metadata elements. The UML shows the hierarchy of entities grouped to align with the six design features (Connolly and Begg, 2010) (Figure 2). Next, we discuss each group and the relevance of its components to water management data. We refer to the key information model entities using capital letters. \n\n\nInformation Model Concepts and their description\n\n\n\n\nFigure 2\n: Conceptual diagram relating the first six design features into the water management information model constructs. Key controlled vocabularies are introduced to the boxes outlined in purple. The \u201cCategory\u201d boxes for Object Types, Attributes, and Instances are not shown for simplicity \n\n\nDataset Structure\n\n\nExtensible Data Structures (Feature #1) are supported with Datasets, Object Types, and Attributes (Figure 2, blue entities) that users can define and customize. A Dataset can represent types of input or output data in a Model Program (Morsy et al., 2017) like WEAP or a dataset or resource (Tarboton et al., 2014) like US dams shapefile dataset, or Excel files independent of implementation. An Object Type is a system component (e.g., reservoir, canal, water source, or demand site) and can have one or more quantitative or qualitative Attributes or properties. An Object Type can be specified (i.e., implemented) for zero or more locations as Instances (e.g., Hyrum Reservoir). \n\n\nOptionally, users may relate or group one or many Object Types into a Category they define. The Category is a grouping and can be used to query and filter a group of Object Types within the same Dataset. For example, the \u201csupply\u201d Category can group all Object Types within the dataset that share a water supply purpose. Similarly, for Attributes, \u201cCost\u201d and \u201cHydropower\u201d can be used to group a set of attributes of an Object Type. In future work, a more sophisticated hierarchical grouping within the Category itself (also referred to as ontology) (Uschold and Gruninger, 2004) can help answer more specific use cases.  \n\n\nOptionally, to group many Object Types that share a common classification, users may relate one or many Object Types into a defined Category. The Category defined here, is a simplistic grouping and can be used to query and filter a group of Object Types within the same Dataset. For example, a \u201csupply\u201d or \u201cdemand\u201d Categories can group all its Objects. Similarly, for Attributes, \u201ccost\u201d and \u201cHydropower\u201d can be used to group a set of attributes of an Object Type. A more sophisticated hierarchical grouping within the category itself (also referred to as ontology) (Uschold and Gruninger, 2004) is out of the scope of this work and maybe improved in future work to meet additional specific use cases. This capability to build data structures meets the first design requirement to be modular and extensible to represent systems components.  \n\n\nNetworks\n\n\nNetworks of nodes \n links (Feature #2) and scenarios \n version control (Feature #3) allow users to implement a Dataset Structure as specific Instances in a particular area (Figure 2, green entities). Networks and scenarios also allow users to track changes in topology and data values. An Instance inherits the properties of its parent Object Type. An Instance may be geo-referenced as a node in space with longitude and latitude coordinates or as a link, that has start and end nodes. \n\n\nWe use the general concept of Instance to refer to nodes and links because both Instances have similar descriptions except that the link must reference a start and end node. Multiple node and link Instances may belong to a Scenario and represent a particular topological relationship (e.g., existing vs proposed infrastructure). Relevant to extensibility in Feature #1, many Scenarios can belong to a Master Network where a Network represents all the nodes and links that exist across its Scenarios (i.e., sub-networks). Similar to the grouping of Object Types and Attributes, a Category can group a subset of node or link Instances of an Object Type. For example, \u201cRiverine\u201d or \u201cFloodplain\u201d Categories may apply to particular links (not all) of a \u201cstream\u201d Object Type as in the WASH Model. \n\n\nMetadata\n\n\nAn Organization can have many People and a Person can create one or many Methods or Sources (Feature #4) (Figure 2, orange entities). Besides the Attribute name that represent \u201cwhat\u201d and the Instance name that represent \u201cwhere\u201d, WaMDaM supports four essential key metadata to interpret data values: i) the Source of the Data Value (i.e., one source or method for the time series values) and ii) the Method used to create the Data Value and its type (e.g., how measured, derived, modeled). Further, the iii) Organization and iv) People who created the element Data Value as part of the Source and Method. People and Organization may differ for Sources and Methods. \nFor example, \u201cthe United States Geological Survey (USGS)\u201d is the Organization that served the Source to the US Dams Dataset. The US Army Corps of Engineers is the Organization who created the Method to estimate dam elevation in the US Dams Dataset. Lastly, iv) WaMDaM requires the Unit of Data Values as property to an Attribute at the Object Type level, which enforces the same Unit for an Attribute of all Instances. Thus, WaMDaM enforces unit consistency across Instances of the same Attribute as required by most of the investigated models. \nSpecifying methods and Sources is also required for each node or link instance. A direct metadata support for Attributes and Instances guides users to consistently document, access, and reuse metadata for each of them. We recognize that there is a potential for a more complex or specific representation of metadata as in ODM2 and the Dublin Core Metadata Initiative (Horsburgh et al., 2016). However, too much metadata can discourage users and too little metadata can be insufficient to correctly interpret data. We attempted to balance between the principles and practicality of metadata usage as recommended by Duval et al. (2002). \n\n\nData Values\n\n\nSimilar to the Unit, each Attribute of an Object Type has one Attribute Data Type (dual values, numeric, seasonal, etc.) that applies to all the Object\u2019s Instances. The Mappings bridge table connects the Attribute with an Instance and its DataValues through the DataValuesMapper bridge table (Feature #5) (Figure 1 red entities; Table 1). Data Values are organized and accessed separately based on their Type to reinforce the persistency and guide users to only populate or query relevant data values. \n\n\nTable 1:\n Supported data types, their definitions, and examples in water resources systems models (Feature #5)\n\n\n\nControlled Vocabulary\n\n\nControlled vocabularies (Feature #6) encourage modelers to use common terms for key Object Type, Attribute, and Instance entities (Figure 2, purple outlines). Users may retain their own native terms for each Instance and have the option to relate native terms to suggested Controlled Vocabularies to cross-reference and support searching. For example, the controlled term \u201creservoir\u201d relates the native term \u201cwater body\u201d used by the USGS Dataset a second native term \u201cdam\u201d used by the US Army Corps of Engineers dataset. Thus, a query for \u201creservoir\u201d can return data for instances with the native terms reservoir, water body, and dam.", 
            "title": "Information Model"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#wamdam-information-model", 
            "text": "For the first six design features, we use the Unified Modeling Language (UML) to represent the relationships among data and metadata elements. The UML shows the hierarchy of entities grouped to align with the six design features (Connolly and Begg, 2010) (Figure 2). Next, we discuss each group and the relevance of its components to water management data. We refer to the key information model entities using capital letters.", 
            "title": "WaMDaM Information Model"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#information-model-concepts-and-their-description", 
            "text": "Figure 2 : Conceptual diagram relating the first six design features into the water management information model constructs. Key controlled vocabularies are introduced to the boxes outlined in purple. The \u201cCategory\u201d boxes for Object Types, Attributes, and Instances are not shown for simplicity", 
            "title": "Information Model Concepts and their description"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#dataset-structure", 
            "text": "Extensible Data Structures (Feature #1) are supported with Datasets, Object Types, and Attributes (Figure 2, blue entities) that users can define and customize. A Dataset can represent types of input or output data in a Model Program (Morsy et al., 2017) like WEAP or a dataset or resource (Tarboton et al., 2014) like US dams shapefile dataset, or Excel files independent of implementation. An Object Type is a system component (e.g., reservoir, canal, water source, or demand site) and can have one or more quantitative or qualitative Attributes or properties. An Object Type can be specified (i.e., implemented) for zero or more locations as Instances (e.g., Hyrum Reservoir).   Optionally, users may relate or group one or many Object Types into a Category they define. The Category is a grouping and can be used to query and filter a group of Object Types within the same Dataset. For example, the \u201csupply\u201d Category can group all Object Types within the dataset that share a water supply purpose. Similarly, for Attributes, \u201cCost\u201d and \u201cHydropower\u201d can be used to group a set of attributes of an Object Type. In future work, a more sophisticated hierarchical grouping within the Category itself (also referred to as ontology) (Uschold and Gruninger, 2004) can help answer more specific use cases.    Optionally, to group many Object Types that share a common classification, users may relate one or many Object Types into a defined Category. The Category defined here, is a simplistic grouping and can be used to query and filter a group of Object Types within the same Dataset. For example, a \u201csupply\u201d or \u201cdemand\u201d Categories can group all its Objects. Similarly, for Attributes, \u201ccost\u201d and \u201cHydropower\u201d can be used to group a set of attributes of an Object Type. A more sophisticated hierarchical grouping within the category itself (also referred to as ontology) (Uschold and Gruninger, 2004) is out of the scope of this work and maybe improved in future work to meet additional specific use cases. This capability to build data structures meets the first design requirement to be modular and extensible to represent systems components.", 
            "title": "Dataset Structure"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#networks", 
            "text": "Networks of nodes   links (Feature #2) and scenarios   version control (Feature #3) allow users to implement a Dataset Structure as specific Instances in a particular area (Figure 2, green entities). Networks and scenarios also allow users to track changes in topology and data values. An Instance inherits the properties of its parent Object Type. An Instance may be geo-referenced as a node in space with longitude and latitude coordinates or as a link, that has start and end nodes.   We use the general concept of Instance to refer to nodes and links because both Instances have similar descriptions except that the link must reference a start and end node. Multiple node and link Instances may belong to a Scenario and represent a particular topological relationship (e.g., existing vs proposed infrastructure). Relevant to extensibility in Feature #1, many Scenarios can belong to a Master Network where a Network represents all the nodes and links that exist across its Scenarios (i.e., sub-networks). Similar to the grouping of Object Types and Attributes, a Category can group a subset of node or link Instances of an Object Type. For example, \u201cRiverine\u201d or \u201cFloodplain\u201d Categories may apply to particular links (not all) of a \u201cstream\u201d Object Type as in the WASH Model.", 
            "title": "Networks"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#metadata", 
            "text": "An Organization can have many People and a Person can create one or many Methods or Sources (Feature #4) (Figure 2, orange entities). Besides the Attribute name that represent \u201cwhat\u201d and the Instance name that represent \u201cwhere\u201d, WaMDaM supports four essential key metadata to interpret data values: i) the Source of the Data Value (i.e., one source or method for the time series values) and ii) the Method used to create the Data Value and its type (e.g., how measured, derived, modeled). Further, the iii) Organization and iv) People who created the element Data Value as part of the Source and Method. People and Organization may differ for Sources and Methods. \nFor example, \u201cthe United States Geological Survey (USGS)\u201d is the Organization that served the Source to the US Dams Dataset. The US Army Corps of Engineers is the Organization who created the Method to estimate dam elevation in the US Dams Dataset. Lastly, iv) WaMDaM requires the Unit of Data Values as property to an Attribute at the Object Type level, which enforces the same Unit for an Attribute of all Instances. Thus, WaMDaM enforces unit consistency across Instances of the same Attribute as required by most of the investigated models. \nSpecifying methods and Sources is also required for each node or link instance. A direct metadata support for Attributes and Instances guides users to consistently document, access, and reuse metadata for each of them. We recognize that there is a potential for a more complex or specific representation of metadata as in ODM2 and the Dublin Core Metadata Initiative (Horsburgh et al., 2016). However, too much metadata can discourage users and too little metadata can be insufficient to correctly interpret data. We attempted to balance between the principles and practicality of metadata usage as recommended by Duval et al. (2002).", 
            "title": "Metadata"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#data-values", 
            "text": "Similar to the Unit, each Attribute of an Object Type has one Attribute Data Type (dual values, numeric, seasonal, etc.) that applies to all the Object\u2019s Instances. The Mappings bridge table connects the Attribute with an Instance and its DataValues through the DataValuesMapper bridge table (Feature #5) (Figure 1 red entities; Table 1). Data Values are organized and accessed separately based on their Type to reinforce the persistency and guide users to only populate or query relevant data values.   Table 1:  Supported data types, their definitions, and examples in water resources systems models (Feature #5)", 
            "title": "Data Values"
        }, 
        {
            "location": "/DesignDocumentation/info_model/#controlled-vocabulary", 
            "text": "Controlled vocabularies (Feature #6) encourage modelers to use common terms for key Object Type, Attribute, and Instance entities (Figure 2, purple outlines). Users may retain their own native terms for each Instance and have the option to relate native terms to suggested Controlled Vocabularies to cross-reference and support searching. For example, the controlled term \u201creservoir\u201d relates the native term \u201cwater body\u201d used by the USGS Dataset a second native term \u201cdam\u201d used by the US Army Corps of Engineers dataset. Thus, a query for \u201creservoir\u201d can return data for instances with the native terms reservoir, water body, and dam.", 
            "title": "Controlled Vocabulary"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/", 
            "text": "Logical Data Model\n\n\nWe implemented the information model into a logical data model by defining a table for each entity, column for each attribute, and specifying the cardinality between data entities, mainly as one-to-many or many-to-many as discussed next for data entities in each feature. \n\n\nWhy the Relational Model?:\n   \n\n\n\n\n\n\nIt supports conditional data queries (Feature #7)   \n\n\n\n\n\n\nIt is platform independent and implement as open-source on different operating systems and different relational database systems (Feature #8)   \n\n\n\n\n\n\nIt supports a standardized and stable Structured Query Language (SQL)  \n\n\n\n\n\n\nFollows common use in the water resources community (Harou et al., 2010; Horsburgh et al., 2016; Horsburgh et al., 2008; Knox et al., 2014).    \n\n\n\n\n\n\n\n\nSchema interactive diagram\n\n\nWaMDaM schema or entity relationship diagram is available at this interactive site. Check out the interactive schema \nSchema\n \n\n\nSchema XML file\n\n\nWaMDaM schema was designed using \nDbWrench\n. Check out the \nXML file\n\n\nDataset Structure\n\n\nWe use one-to-many relationships between Datasets, Object Types, and Attributes to support extensible data structures (Feature #1). For example, a WEAP model (i.e., dataset) has 11 Object Types (e.g., Reservoir); each Object Type has many Attributes (e.g., Storage Capacity, Net Evaporation). Each Attribute can only have one of the seven supported Data Types as a controlled vocabulary in addition to one Unit that can be related with an optional controlled unit. We also use one-to-many relationships between Object Category and Attribute Category with Object Types and Attributes, respectively. Users can add Categories to group one or many Objects or Attributes (Figure 1).  \n\n\nNetworks\n\n\nTo support nodes, links, networks and scenarios in a study area, we first use the Instances table to represent the common properties between nodes and links. Then we manage the unique start and end nodes for each link instance into the Connection table where the direction of flow is implied through start and end nodes on the same link. Representing both nodes and links into the Instance table enables users to use the same query to access data values for either nodes or links. The normalized Instance table approach also allows representing other Object Type typologies besides nodes and links, like a network. A \u201cnetwork\u201d Object Type can contain the global attributes that apply to all the nodes and links in a Master Network (Feature #6). This normalized design that works for multiple typologies and allows a more generalized access to data values improves prior approaches that require many different queries to access node or links data (Abdallah and Rosenberg, 2014; Knox et al., 2014; Yates et al., 2005). \n\n\nThe Object Type is connected to its Instance through a dummy Attribute for each Object Type called ObjectInstances, which requires a software business rule to create it when loading data. A software businesses rule also enforces that a Node or Link Instance can only belong to a parent Object Type with a typology as \u201cnode\u201d, \u201clink\u201d, or \u201cnetwork\u201d. Another software business rule insures that each link in the Connections table has a start and end node. This normalized approach avoids a circular reference problem when the Object Types table is directly connected to both the Instances and Attributes tables and then both of them are connected to the Data Values. A circular reference in the database is problematic to the database integrity as may allow two non-unique transaction paths to insert or delete data values like the Object Type to Instances to Data Values, or from Object Type to Attributes to Data Values  (Connolly and Begg, 2010).\n\n\nSecond, to relate Instances with their Object Types, Attributes, and metadata, we introduce a Mappings bridge table (Figure 3). An Instance also inherit its Attributes and Object Typology from its parent Object Type. For example, a Reservoir Object Type can have many attributes like evaporation and owner name that associate with many Instances. Many Reservoir Instances can share data identical values like the same evaporation time series or same owner with no duplication. For a consistent representation in space, especially geo-referenced queries and visualizations, a Master Network, which contains all its Instances, may have a spatial reference and elevation datum, where they can be defined through optional controlled vocabularies. \n\n\nScenarios\n\n\nA Scenario relates a combination of one or many Instances, their Attributes, metadata, and Data Values that are already linked in the Mappings table within the same Master Network using ScenarioMappings bridge table (Feature #2 and #3). The ScenarioMappings table efficiently reuses the Mappings table combinations the across many Scenarios. For example, the same time series Hyrum Reservoir inflow can belong to the \u201ccurrent\u201d and \u201cfuture\u201d scenarios, while the \u201ccurrent\u201d scenario can have many other reservoirs, attributes, and data values. WaMDaM Wizard used the ScenarioMappings table to query and compare how the combinations of Instances, their Attributes, and Data Values change between two scenarios within the same network. \n\n\nMetadata\n\n\nThe Mappings table relates each node or link Instance with an Attribute and with its Data Values and with a Source and Method (Feature #4). Each Source and Method can have citations and are created by a Person and can that belongs to an Organization. An Attribute can have one Data Type (e.g., time series) that applies to all its parent Object Type Instances (Feature #5).  For Example, an inflow Attribute to a reservoir Object Type can have time series Data Type that applies to Hyrum and Cutler reservoir instances. A Data Value also can be shared across Instances through the bridge table DataValuesMapper which contributes to parsimony and storage efficiency. Here we refer to a Data Value being a time series or multi-variable-array (Figure 3). Users can store data values once and reuse them across Scenarios and Instances without duplication through the both the ScenarioMappings and DataValuesMapper bridge tables. Additional Data Types can be added in tables next to existing Types and connected to the DataValuesMapper without affecting any of the current model relations. \n\n\nData Values\n\n\nWe organized time series and multi-attribute series Data Types into two tables each to allow practical, efficient, and flexible use as discussed next for each Type (Figure 1 \u2013red entites). In each Type, the first table separates specific metadata from data values in the second table which follows the architecture of the Network Common Data Form (NetCDF) (OGC, 2011) and ODM2 (Gan et al., In Preperation; Horsburgh et al., 2016).  \n\n\nThe Time Series table (Figure 1) captures key global metadata for the entire time series and can have one or many values and time stamps in the TimeSeriesValues table. The Time Series table stores i) Begin and End Date/Time fields which represent the extent of a time series, ii) YearType to specify whether it is a \u201cwater year\u201d or \u201ccalendar year\u201d as both of them are used in water management datasets but not supported in ODM, iii) Aggregation Statistic which is a vocabulary for describing the calculated statistic over an Interval associated with recorded observations (e.g., average, cumulative)., and vi) an Aggregation Interval which indicates the time period of the aggregation statistic (e.g., 1) within an Aggregation Interval Unit (e.g., day, month). The second table records data values and their time stamp. WaMDaM is not intended to replace the specialized time series database systems like CUAHSI but rather to consume and integrate data from them with other data types. \n\n\nThe MultiAttributeSeries table stores multiple attributes (i.e., column names) and their corresponding metadata of source, method, and unit and can have one or many data values for each column in the MultiAttributeSeriesValues table. Each value has a sequential order value to preserve the order and pairing of data values across many attributes within the same array. Data values of the MultiAttributeSeries are flexible to have numeric or text values, which allows storing a wide range of related descriptive and numeric values for many cases. Each attribute or column has its metadata and data values and can be accessed by itself or with the other columns. Future work based on use cases may identify the tradeoff of this flexibility on maintaining the integrity of stored values.\n\n\nControlled Vocabulary\n\n\nControlled vocabularies can apply to zero or many Object Types, Attributes, and Instances Feature #6 (Figure 3). We also introduced eleven other vocabularies a mentioned earlier like Aggregation Statistic for time series, and Spatial Reference of a Network. Each controlled vocabularies table includes a name, definition, and category (Horsburgh et al., 2016). You can view the full list of Controlled Vocabulary tables at \nhttp://schema.wamdam.org/diagrams/03_CVs.html\n. The full WaMDaM logical data model schema comprises 41 interrelated tables and can be viewed at \nhttp://schema.wamdam.org/diagrams/01_WaMDaM.html\n (Figure A, Appendix A). The Extensible Markup Language (XML) schema file is available at \nhttps://github.com/WamdamProject/WaMDaM_Information_Model\n. \n\n\n\nFigure A1: WaMDaM logical model tables grouped into the features of Dataset Structure (#1), Networks (#2) and Scenarios (#3), Metadata (#4), and Data Values (#5). The diagram uses the crow\u2019s foot notation for relationship cardinality and participation. An interactive html copy is available at \nhttp://schema.wamdam.org/diagrams/01_WaMDaM.html\n. . Controlled vocabularies tables ((Feature #6) are not shown here for simplicity and can be viewed at \nhttp://schema.wamdam.org/diagrams/03_CVs.html\n\n\nIn general, a WaMDaM data value requires fourteen elements of metadata that include Dataset, Network, and Scenario, and Instance names (Table 1). Correctly representing the many-to-many relationships among the entities within the first six design features while attempting to achieve parsimony within a relatively as easy querying as possible and more efficient storage consumed a large portion of the iterative WaMDaM designs (Connolly and Begg, 2010). \n\n\nTable A2: Fourteen common required metadata elements for data values in WaMDaM. Other data types like time series, and multi-column attributes have additional specific metadata.", 
            "title": "Logical Model Schema"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#logical-data-model", 
            "text": "We implemented the information model into a logical data model by defining a table for each entity, column for each attribute, and specifying the cardinality between data entities, mainly as one-to-many or many-to-many as discussed next for data entities in each feature.   Why the Relational Model?:        It supports conditional data queries (Feature #7)       It is platform independent and implement as open-source on different operating systems and different relational database systems (Feature #8)       It supports a standardized and stable Structured Query Language (SQL)      Follows common use in the water resources community (Harou et al., 2010; Horsburgh et al., 2016; Horsburgh et al., 2008; Knox et al., 2014).", 
            "title": "Logical Data Model"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#schema-interactive-diagram", 
            "text": "WaMDaM schema or entity relationship diagram is available at this interactive site. Check out the interactive schema  Schema", 
            "title": "Schema interactive diagram"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#schema-xml-file", 
            "text": "WaMDaM schema was designed using  DbWrench . Check out the  XML file", 
            "title": "Schema XML file"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#dataset-structure", 
            "text": "We use one-to-many relationships between Datasets, Object Types, and Attributes to support extensible data structures (Feature #1). For example, a WEAP model (i.e., dataset) has 11 Object Types (e.g., Reservoir); each Object Type has many Attributes (e.g., Storage Capacity, Net Evaporation). Each Attribute can only have one of the seven supported Data Types as a controlled vocabulary in addition to one Unit that can be related with an optional controlled unit. We also use one-to-many relationships between Object Category and Attribute Category with Object Types and Attributes, respectively. Users can add Categories to group one or many Objects or Attributes (Figure 1).", 
            "title": "Dataset Structure"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#networks", 
            "text": "To support nodes, links, networks and scenarios in a study area, we first use the Instances table to represent the common properties between nodes and links. Then we manage the unique start and end nodes for each link instance into the Connection table where the direction of flow is implied through start and end nodes on the same link. Representing both nodes and links into the Instance table enables users to use the same query to access data values for either nodes or links. The normalized Instance table approach also allows representing other Object Type typologies besides nodes and links, like a network. A \u201cnetwork\u201d Object Type can contain the global attributes that apply to all the nodes and links in a Master Network (Feature #6). This normalized design that works for multiple typologies and allows a more generalized access to data values improves prior approaches that require many different queries to access node or links data (Abdallah and Rosenberg, 2014; Knox et al., 2014; Yates et al., 2005).   The Object Type is connected to its Instance through a dummy Attribute for each Object Type called ObjectInstances, which requires a software business rule to create it when loading data. A software businesses rule also enforces that a Node or Link Instance can only belong to a parent Object Type with a typology as \u201cnode\u201d, \u201clink\u201d, or \u201cnetwork\u201d. Another software business rule insures that each link in the Connections table has a start and end node. This normalized approach avoids a circular reference problem when the Object Types table is directly connected to both the Instances and Attributes tables and then both of them are connected to the Data Values. A circular reference in the database is problematic to the database integrity as may allow two non-unique transaction paths to insert or delete data values like the Object Type to Instances to Data Values, or from Object Type to Attributes to Data Values  (Connolly and Begg, 2010).  Second, to relate Instances with their Object Types, Attributes, and metadata, we introduce a Mappings bridge table (Figure 3). An Instance also inherit its Attributes and Object Typology from its parent Object Type. For example, a Reservoir Object Type can have many attributes like evaporation and owner name that associate with many Instances. Many Reservoir Instances can share data identical values like the same evaporation time series or same owner with no duplication. For a consistent representation in space, especially geo-referenced queries and visualizations, a Master Network, which contains all its Instances, may have a spatial reference and elevation datum, where they can be defined through optional controlled vocabularies.", 
            "title": "Networks"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#scenarios", 
            "text": "A Scenario relates a combination of one or many Instances, their Attributes, metadata, and Data Values that are already linked in the Mappings table within the same Master Network using ScenarioMappings bridge table (Feature #2 and #3). The ScenarioMappings table efficiently reuses the Mappings table combinations the across many Scenarios. For example, the same time series Hyrum Reservoir inflow can belong to the \u201ccurrent\u201d and \u201cfuture\u201d scenarios, while the \u201ccurrent\u201d scenario can have many other reservoirs, attributes, and data values. WaMDaM Wizard used the ScenarioMappings table to query and compare how the combinations of Instances, their Attributes, and Data Values change between two scenarios within the same network.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#metadata", 
            "text": "The Mappings table relates each node or link Instance with an Attribute and with its Data Values and with a Source and Method (Feature #4). Each Source and Method can have citations and are created by a Person and can that belongs to an Organization. An Attribute can have one Data Type (e.g., time series) that applies to all its parent Object Type Instances (Feature #5).  For Example, an inflow Attribute to a reservoir Object Type can have time series Data Type that applies to Hyrum and Cutler reservoir instances. A Data Value also can be shared across Instances through the bridge table DataValuesMapper which contributes to parsimony and storage efficiency. Here we refer to a Data Value being a time series or multi-variable-array (Figure 3). Users can store data values once and reuse them across Scenarios and Instances without duplication through the both the ScenarioMappings and DataValuesMapper bridge tables. Additional Data Types can be added in tables next to existing Types and connected to the DataValuesMapper without affecting any of the current model relations.", 
            "title": "Metadata"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#data-values", 
            "text": "We organized time series and multi-attribute series Data Types into two tables each to allow practical, efficient, and flexible use as discussed next for each Type (Figure 1 \u2013red entites). In each Type, the first table separates specific metadata from data values in the second table which follows the architecture of the Network Common Data Form (NetCDF) (OGC, 2011) and ODM2 (Gan et al., In Preperation; Horsburgh et al., 2016).    The Time Series table (Figure 1) captures key global metadata for the entire time series and can have one or many values and time stamps in the TimeSeriesValues table. The Time Series table stores i) Begin and End Date/Time fields which represent the extent of a time series, ii) YearType to specify whether it is a \u201cwater year\u201d or \u201ccalendar year\u201d as both of them are used in water management datasets but not supported in ODM, iii) Aggregation Statistic which is a vocabulary for describing the calculated statistic over an Interval associated with recorded observations (e.g., average, cumulative)., and vi) an Aggregation Interval which indicates the time period of the aggregation statistic (e.g., 1) within an Aggregation Interval Unit (e.g., day, month). The second table records data values and their time stamp. WaMDaM is not intended to replace the specialized time series database systems like CUAHSI but rather to consume and integrate data from them with other data types.   The MultiAttributeSeries table stores multiple attributes (i.e., column names) and their corresponding metadata of source, method, and unit and can have one or many data values for each column in the MultiAttributeSeriesValues table. Each value has a sequential order value to preserve the order and pairing of data values across many attributes within the same array. Data values of the MultiAttributeSeries are flexible to have numeric or text values, which allows storing a wide range of related descriptive and numeric values for many cases. Each attribute or column has its metadata and data values and can be accessed by itself or with the other columns. Future work based on use cases may identify the tradeoff of this flexibility on maintaining the integrity of stored values.", 
            "title": "Data Values"
        }, 
        {
            "location": "/DesignDocumentation/logical_Model/#controlled-vocabulary", 
            "text": "Controlled vocabularies can apply to zero or many Object Types, Attributes, and Instances Feature #6 (Figure 3). We also introduced eleven other vocabularies a mentioned earlier like Aggregation Statistic for time series, and Spatial Reference of a Network. Each controlled vocabularies table includes a name, definition, and category (Horsburgh et al., 2016). You can view the full list of Controlled Vocabulary tables at  http://schema.wamdam.org/diagrams/03_CVs.html . The full WaMDaM logical data model schema comprises 41 interrelated tables and can be viewed at  http://schema.wamdam.org/diagrams/01_WaMDaM.html  (Figure A, Appendix A). The Extensible Markup Language (XML) schema file is available at  https://github.com/WamdamProject/WaMDaM_Information_Model .   \nFigure A1: WaMDaM logical model tables grouped into the features of Dataset Structure (#1), Networks (#2) and Scenarios (#3), Metadata (#4), and Data Values (#5). The diagram uses the crow\u2019s foot notation for relationship cardinality and participation. An interactive html copy is available at  http://schema.wamdam.org/diagrams/01_WaMDaM.html . . Controlled vocabularies tables ((Feature #6) are not shown here for simplicity and can be viewed at  http://schema.wamdam.org/diagrams/03_CVs.html  In general, a WaMDaM data value requires fourteen elements of metadata that include Dataset, Network, and Scenario, and Instance names (Table 1). Correctly representing the many-to-many relationships among the entities within the first six design features while attempting to achieve parsimony within a relatively as easy querying as possible and more efficient storage consumed a large portion of the iterative WaMDaM designs (Connolly and Begg, 2010).   Table A2: Fourteen common required metadata elements for data values in WaMDaM. Other data types like time series, and multi-column attributes have additional specific metadata.", 
            "title": "Controlled Vocabulary"
        }, 
        {
            "location": "/DesignDocumentation/Physical_Model/", 
            "text": "Physical Model Implementation\n\n\nImplementation\n\n\nWe implemented the logical data model schema represented in XML into four physical Relational Database Management Systems (RDBMS: PostgreSQL, MySQL, Microsoft SQL Server, and SQLite) to demonstrate that WaMDaM is independent of the RDBMS and increase value to users. First, we selected a physical data type for each field in the logical model entities (e.g., integer, character, binary) and we imposed physical constraints on each field (e.g., value cannot be null) by following the physical data types convention in ODM2 (Horsburgh et al., 2016). \n\n\nSecond, we adapted an existing Python 2.7 script \nODM2-build_schemas\n to forward engineer the logical model XML schema format into the Data Definition Language (DDL) which is a set of create statements for WaMDaM tables for each of the four RDBMS. Finally, we executed the DDL script within each RDBMS to create a physical blank WaMDaM database that users can then load with data.\n\n\nThe adapted script and a GUI to use it for other desings will be posted here\n\nhttps://github.com/WamdamProject/WaMDaM_DDL_generator_Wizard\n\n\nCopies of WaMDaM Dbs\n\n\nScript to create blank WaMDaM databases OR copies of each database to restore \n\n1. \nMicrosoft SQL Server\n  \n\n2. \nMySQL\n\n3. \nPostgreSQL\n\n4. \nSQLite", 
            "title": "Physical Model Implementations"
        }, 
        {
            "location": "/DesignDocumentation/Physical_Model/#physical-model-implementation", 
            "text": "", 
            "title": "Physical Model Implementation"
        }, 
        {
            "location": "/DesignDocumentation/Physical_Model/#implementation", 
            "text": "We implemented the logical data model schema represented in XML into four physical Relational Database Management Systems (RDBMS: PostgreSQL, MySQL, Microsoft SQL Server, and SQLite) to demonstrate that WaMDaM is independent of the RDBMS and increase value to users. First, we selected a physical data type for each field in the logical model entities (e.g., integer, character, binary) and we imposed physical constraints on each field (e.g., value cannot be null) by following the physical data types convention in ODM2 (Horsburgh et al., 2016).   Second, we adapted an existing Python 2.7 script  ODM2-build_schemas  to forward engineer the logical model XML schema format into the Data Definition Language (DDL) which is a set of create statements for WaMDaM tables for each of the four RDBMS. Finally, we executed the DDL script within each RDBMS to create a physical blank WaMDaM database that users can then load with data.  The adapted script and a GUI to use it for other desings will be posted here https://github.com/WamdamProject/WaMDaM_DDL_generator_Wizard", 
            "title": "Implementation"
        }, 
        {
            "location": "/DesignDocumentation/Physical_Model/#copies-of-wamdam-dbs", 
            "text": "Script to create blank WaMDaM databases OR copies of each database to restore  \n1.  Microsoft SQL Server    \n2.  MySQL \n3.  PostgreSQL \n4.  SQLite", 
            "title": "Copies of WaMDaM Dbs"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/", 
            "text": "Controlled vocabularies registry\n\n\nWe deployed an online-hosted controlled vocabularies system under our full control to physically implement the controlled vocabularies design (Feature # 6), allow multiple users to access, and reuse consistent vocabularies across WaMDaM database instances and machines. We adapted an existing online registry to manage WaMDaM controlled vocabularies across users and database instances at \nhttp://vocabulary.wamdam.org\n (Horsburgh et al., 2016; Horsburgh et al., 2014). Controlled vocabularies for water management data in WaMDaM can be more extensive and specific than existing controlled vocabularies in CUAHSI. First, WaMDaM users have Object Type more specifically (e.g., Reservoir) than the equivalent Site Type (e.g., Lake, Reservoir, Impoundment) in CUAHSI. Second, WaMDaM \u201cAttributes\u201d extend beyond the often-quantitative time series data of CUAHSI \u201cVariables\u201d and can include qualitative descriptive data (e.g., Dam Purpose) (Feature #5). Third, WaMDaM controls the Instance name whereas the CUAHSI site code is uncontrolled. Fourth, WaMDaM has additional categories of vocabularies beyond Object Type, Attributes, Instances (not shown in Figure 3 for simplicity) that do not exist in CUAHSI like the Attribute Data Type, Descriptor value, and season name that control categorical data values. \n\n\nModelers have the option to use WaMDaM controlled vocabularies, submit suggestions to add new terms within the online registry, or use their own native vocabularies without registering them with WaMDaM\u2019s. We populated the system with example WaMDaM controlled vocabularies for the datasets used in the use cases. Molders can use the CV system seamlessly as they populate their datasets into the Excel Workbook template. Within the Excel template, there is Visual Basic script button that downloads and updates look-up menus for all controlled vocabularies so users can register their native terms in each Excel workbook sheet. \n\n\nThis WaMDaM controlled vocabularies system may serve as a basis for a system the water resources systems community can use to review existing terms and add new terms. For example, a user can view the controlled vocabularies and their definitions for the Object Types table at \nhttp://vocabulary.wamdam.org/objecttype/\n. If the user wants to use a new controlled Object Type, they can click New and fill out and submit a form that includes the term, its definition, and other metadata that describe its source. Once submitted, we will receive an email of the submission and decide to accept, add, or reject it (see Horsburgh et al. (2014) for more details). \n\n\nControlled Vocabulary tables\n\n\nThe three key controlled vocabulary that are needed to basic data quries are:\n\nCV_AttributeName, CV_InstanceName, and CV_ObjectType\n\n\nCV_AggregationStatistic\n\n\nA term for describing the statistical action used to calculate over recorded time series values within a time interval. For example, 100 cfs of delivery target to a demand site is a \"cumulative\" aggregation statistic calculated over a time interval like a month.\n\n\nCV_AttributeDataType\n\n\nA term for describing the supported types of data that an attribute in WaMDaM can take based on logical and physical groupings like numeric, text, time stamped values, and parried categorical values. For example, numeric values, descriptor value, electronic files, time series, and multi attribute series.\n\n\nCV_AttributeName\n\n\nA Term describing the name of quantitate or qualitative property of a water system component (e.g., reservoir).\n\n\nCV_DescriptorValues\n\n\nA term for describing descriptive values (characters as numeric or strings) for an attribute. The descriptor values can be shared across attributes of systems components like land use \"Grass_Pasture\" or irrigation type \"Flood\", or site code as \"10000010\"\n\n\nCV_DualValueMeaning\n\n\nA Term describing the specific meaning of Boolean data values (True, False)for an attribute.\n\n\nCV_ElectronicFileFormat\n\n\nA term for describing the supported physical format of files loaded into WaMDaM as values to attributes(e.g., csv, jpg, NETCDF).\n\n\nCV_ElevationDatum\n\n\nA term for describing vertical datums. Vertical datums are used in WaMDaM to specify the origin for elevations associated with node instance in networks.\n\n\nCV_InstanceName\n\n\nA term for describing the name of a specific node or link system component in a specific location which can related synonymous native instance terms (e.g., Hyrum = Hrm \n Hyrum Reservoir).\n\n\nCV_MethodType\n\n\nA term for describing types of Methods associated with recording or generating data values to attributes. Example method types are like \"expert opinion\", \"field procedure\", \"model simulation\".\n\n\nCV_ObjectType\n\n\nA term for describing a built or natural water system component .\n\n\nCV_ObjectTypology\n\n\nA term for describing the category of an Object Type as either: Node, link, network.\n\n\nCV_SeasonName\n\n\nA term for describing a categorical value that may correspond to numeric values of an attribute. The CategoricalValue represents steps in time (e.g., Winter, Summer, March, April) or space (e.g., categorical levels of reservoir levels (e.g., inactive, conservation, flood)\n\n\nCV_SpatialReference\n\n\nA term for describing a geographic reference to all the node instances that belong to the same Master Network.\n\n\nCV_Units\n\n\nA term for describing the name of the Unit of data value of an attribute.", 
            "title": "Controlled Vocabulary"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#controlled-vocabularies-registry", 
            "text": "We deployed an online-hosted controlled vocabularies system under our full control to physically implement the controlled vocabularies design (Feature # 6), allow multiple users to access, and reuse consistent vocabularies across WaMDaM database instances and machines. We adapted an existing online registry to manage WaMDaM controlled vocabularies across users and database instances at  http://vocabulary.wamdam.org  (Horsburgh et al., 2016; Horsburgh et al., 2014). Controlled vocabularies for water management data in WaMDaM can be more extensive and specific than existing controlled vocabularies in CUAHSI. First, WaMDaM users have Object Type more specifically (e.g., Reservoir) than the equivalent Site Type (e.g., Lake, Reservoir, Impoundment) in CUAHSI. Second, WaMDaM \u201cAttributes\u201d extend beyond the often-quantitative time series data of CUAHSI \u201cVariables\u201d and can include qualitative descriptive data (e.g., Dam Purpose) (Feature #5). Third, WaMDaM controls the Instance name whereas the CUAHSI site code is uncontrolled. Fourth, WaMDaM has additional categories of vocabularies beyond Object Type, Attributes, Instances (not shown in Figure 3 for simplicity) that do not exist in CUAHSI like the Attribute Data Type, Descriptor value, and season name that control categorical data values.   Modelers have the option to use WaMDaM controlled vocabularies, submit suggestions to add new terms within the online registry, or use their own native vocabularies without registering them with WaMDaM\u2019s. We populated the system with example WaMDaM controlled vocabularies for the datasets used in the use cases. Molders can use the CV system seamlessly as they populate their datasets into the Excel Workbook template. Within the Excel template, there is Visual Basic script button that downloads and updates look-up menus for all controlled vocabularies so users can register their native terms in each Excel workbook sheet.   This WaMDaM controlled vocabularies system may serve as a basis for a system the water resources systems community can use to review existing terms and add new terms. For example, a user can view the controlled vocabularies and their definitions for the Object Types table at  http://vocabulary.wamdam.org/objecttype/ . If the user wants to use a new controlled Object Type, they can click New and fill out and submit a form that includes the term, its definition, and other metadata that describe its source. Once submitted, we will receive an email of the submission and decide to accept, add, or reject it (see Horsburgh et al. (2014) for more details).", 
            "title": "Controlled vocabularies registry"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#controlled-vocabulary-tables", 
            "text": "The three key controlled vocabulary that are needed to basic data quries are: \nCV_AttributeName, CV_InstanceName, and CV_ObjectType", 
            "title": "Controlled Vocabulary tables"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_aggregationstatistic", 
            "text": "A term for describing the statistical action used to calculate over recorded time series values within a time interval. For example, 100 cfs of delivery target to a demand site is a \"cumulative\" aggregation statistic calculated over a time interval like a month.", 
            "title": "CV_AggregationStatistic"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_attributedatatype", 
            "text": "A term for describing the supported types of data that an attribute in WaMDaM can take based on logical and physical groupings like numeric, text, time stamped values, and parried categorical values. For example, numeric values, descriptor value, electronic files, time series, and multi attribute series.", 
            "title": "CV_AttributeDataType"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_attributename", 
            "text": "A Term describing the name of quantitate or qualitative property of a water system component (e.g., reservoir).", 
            "title": "CV_AttributeName"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_descriptorvalues", 
            "text": "A term for describing descriptive values (characters as numeric or strings) for an attribute. The descriptor values can be shared across attributes of systems components like land use \"Grass_Pasture\" or irrigation type \"Flood\", or site code as \"10000010\"", 
            "title": "CV_DescriptorValues"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_dualvaluemeaning", 
            "text": "A Term describing the specific meaning of Boolean data values (True, False)for an attribute.", 
            "title": "CV_DualValueMeaning"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_electronicfileformat", 
            "text": "A term for describing the supported physical format of files loaded into WaMDaM as values to attributes(e.g., csv, jpg, NETCDF).", 
            "title": "CV_ElectronicFileFormat"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_elevationdatum", 
            "text": "A term for describing vertical datums. Vertical datums are used in WaMDaM to specify the origin for elevations associated with node instance in networks.", 
            "title": "CV_ElevationDatum"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_instancename", 
            "text": "A term for describing the name of a specific node or link system component in a specific location which can related synonymous native instance terms (e.g., Hyrum = Hrm   Hyrum Reservoir).", 
            "title": "CV_InstanceName"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_methodtype", 
            "text": "A term for describing types of Methods associated with recording or generating data values to attributes. Example method types are like \"expert opinion\", \"field procedure\", \"model simulation\".", 
            "title": "CV_MethodType"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_objecttype", 
            "text": "A term for describing a built or natural water system component .", 
            "title": "CV_ObjectType"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_objecttypology", 
            "text": "A term for describing the category of an Object Type as either: Node, link, network.", 
            "title": "CV_ObjectTypology"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_seasonname", 
            "text": "A term for describing a categorical value that may correspond to numeric values of an attribute. The CategoricalValue represents steps in time (e.g., Winter, Summer, March, April) or space (e.g., categorical levels of reservoir levels (e.g., inactive, conservation, flood)", 
            "title": "CV_SeasonName"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_spatialreference", 
            "text": "A term for describing a geographic reference to all the node instances that belong to the same Master Network.", 
            "title": "CV_SpatialReference"
        }, 
        {
            "location": "/DesignDocumentation/ControlledVocabulary/#cv_units", 
            "text": "A term for describing the name of the Unit of data value of an attribute.", 
            "title": "CV_Units"
        }, 
        {
            "location": "/DesignDocumentation/WaMDaM_Wizard/", 
            "text": "WaMDaM Data Loader Wizard\n\n\nWe designed a Python 2.7-based data loader (WaMDaM Wizard) to auto-read input data from an Excel Workbook template into a physical WaMDaM SQLite database instance on the user\u2019s local machine. We chose Excel as a generic input data medium because it is commonly used by modelers and widely used across computer operating systems. The Wizard validates entries to comply with the database, maps primary and foreign keys, and implements software business rules. We elected to use SQLite (\nhttps://www.sqlite.org/index.html\n) because it is free, open-source, and server-less to satisfy open-source design (Feature #8). We also used the SQLite Manager Add-ons to Mozilla Firefox 56 (\nhttps://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/\n) as an open-source user interface to visualize and execute queries against WaMDaM database tables. \n\n\nThe WaMDaM Wizard has three demo data utilities to help users prepare time series data, seasonal data, and shapefile for input to WaMDaM. The Wizard can import data directly from WaterOneFlow CUAHSI web-services and WaterML files by the U.S. Bureau of Reclamation (USBOR) Water Information System web service \nhttps://water.usbr.gov/\n. The Wizard can also provide users with automated detailed and summary comparisons of network topology, metadata, and data values between scenarios in the same network. See instructions to use WaMDaM on Windows at \nhttp://docs.wamdam.org/Getting_started/Steps/\n\n\nFor info on the Wizard architecture, please visit the GitHub repo here.\n\nhttps://github.com/WamdamProject/WaMDaM_Wizard#wamdam_wizard-architecture", 
            "title": "WaMDaM Wizard"
        }, 
        {
            "location": "/DesignDocumentation/WaMDaM_Wizard/#wamdam-data-loader-wizard", 
            "text": "We designed a Python 2.7-based data loader (WaMDaM Wizard) to auto-read input data from an Excel Workbook template into a physical WaMDaM SQLite database instance on the user\u2019s local machine. We chose Excel as a generic input data medium because it is commonly used by modelers and widely used across computer operating systems. The Wizard validates entries to comply with the database, maps primary and foreign keys, and implements software business rules. We elected to use SQLite ( https://www.sqlite.org/index.html ) because it is free, open-source, and server-less to satisfy open-source design (Feature #8). We also used the SQLite Manager Add-ons to Mozilla Firefox 56 ( https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/ ) as an open-source user interface to visualize and execute queries against WaMDaM database tables.   The WaMDaM Wizard has three demo data utilities to help users prepare time series data, seasonal data, and shapefile for input to WaMDaM. The Wizard can import data directly from WaterOneFlow CUAHSI web-services and WaterML files by the U.S. Bureau of Reclamation (USBOR) Water Information System web service  https://water.usbr.gov/ . The Wizard can also provide users with automated detailed and summary comparisons of network topology, metadata, and data values between scenarios in the same network. See instructions to use WaMDaM on Windows at  http://docs.wamdam.org/Getting_started/Steps/  For info on the Wizard architecture, please visit the GitHub repo here. https://github.com/WamdamProject/WaMDaM_Wizard#wamdam_wizard-architecture", 
            "title": "WaMDaM Data Loader Wizard"
        }, 
        {
            "location": "/About/", 
            "text": "About\n\n\nThe Water Management Data Model (WaMDaM) is a novel method that describes and implements database design and its software to organize and compare systems water resources management data. \n\n\nHow to use it?\n\n\nThe WaMDaM Wizard is a desktop data loader from a spreadsheet template to SQLite or MySQL databases\n\n\nWhat does it do?\n\n\nIt enables users to manage and integrate data: CUAHSI time series data, network connectivity, water rights, hydropower, cost, seasonal data, multi-dimension arrays. WaMDaM does not replace existing specialized data systems but rather it brings their data together for the use in water management models   \n\n\nAuthors\n\n\nWaMDaM is developed and maintained primarily by Adel Abdallah for his PhD dissertation. Many professors and developers at Utah State University, Logan, Utah and other institutions nationally and internationally provided feedback. \n\n\nFunding\n \n\n\nWaMDaM has been primarily funded by the National Science Foundation.    \n\n\nLicense\n\n\nWaMDaM is Free! Software and source-code are released under the New Berkeley Software Distribution (BSD) 3-Clause License, which allows for liberal reuse. All source code, use cases, and documentation can be accessed at \nWaMDaM.org", 
            "title": "About"
        }, 
        {
            "location": "/About/#about", 
            "text": "The Water Management Data Model (WaMDaM) is a novel method that describes and implements database design and its software to organize and compare systems water resources management data.", 
            "title": "About"
        }, 
        {
            "location": "/About/#how-to-use-it", 
            "text": "The WaMDaM Wizard is a desktop data loader from a spreadsheet template to SQLite or MySQL databases", 
            "title": "How to use it?"
        }, 
        {
            "location": "/About/#what-does-it-do", 
            "text": "It enables users to manage and integrate data: CUAHSI time series data, network connectivity, water rights, hydropower, cost, seasonal data, multi-dimension arrays. WaMDaM does not replace existing specialized data systems but rather it brings their data together for the use in water management models", 
            "title": "What does it do?"
        }, 
        {
            "location": "/About/#authors", 
            "text": "WaMDaM is developed and maintained primarily by Adel Abdallah for his PhD dissertation. Many professors and developers at Utah State University, Logan, Utah and other institutions nationally and internationally provided feedback.", 
            "title": "Authors"
        }, 
        {
            "location": "/About/#funding", 
            "text": "WaMDaM has been primarily funded by the National Science Foundation.", 
            "title": "Funding"
        }, 
        {
            "location": "/About/#license", 
            "text": "WaMDaM is Free! Software and source-code are released under the New Berkeley Software Distribution (BSD) 3-Clause License, which allows for liberal reuse. All source code, use cases, and documentation can be accessed at  WaMDaM.org", 
            "title": "License"
        }
    ]
}